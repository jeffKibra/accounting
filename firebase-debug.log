[debug] [2022-09-09T20:29:39.241Z] ----------------------------------------------------------------------
[debug] [2022-09-09T20:29:39.244Z] Command:       C:\Program Files\nodejs\node.exe C:\Users\user\AppData\Roaming\npm\node_modules\firebase-tools\lib\bin\firebase.js emulators:start --only firestore --project lehi-76a0d
[debug] [2022-09-09T20:29:39.244Z] CLI Version:   11.4.0
[debug] [2022-09-09T20:29:39.244Z] Platform:      win32
[debug] [2022-09-09T20:29:39.245Z] Node Version:  v16.16.0
[debug] [2022-09-09T20:29:39.246Z] Time:          Fri Sep 09 2022 23:29:39 GMT+0300 (East Africa Time)
[debug] [2022-09-09T20:29:39.246Z] ----------------------------------------------------------------------
[debug] 
[debug] [2022-09-09T20:29:39.337Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2022-09-09T20:29:39.338Z] > authorizing via signed-in user (kibzjeff@gmail.com)
[debug] [2022-09-09T20:29:39.559Z] java version "18.0.2" 2022-07-19

[debug] [2022-09-09T20:29:39.560Z] Java(TM) SE Runtime Environment (build 18.0.2+9-61)
Java HotSpot(TM) 64-Bit Server VM (build 18.0.2+9-61, mixed mode, sharing)

[debug] [2022-09-09T20:29:39.587Z] Parsed Java major version: 18
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[debug] [2022-09-09T20:29:39.623Z] [hub] writing locator at C:\Users\user\AppData\Local\Temp\hub-lehi-76a0d.json
[debug] [2022-09-09T20:29:39.683Z] Ignoring unsupported arg: projectId {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: projectId"}}
[debug] [2022-09-09T20:29:39.683Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2022-09-09T20:29:39.683Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","C:\\Users\\user\\.cache\\firebase\\emulators\\cloud-firestore-emulator-v1.14.4.jar","--host","localhost","--port",8080,"--rules","C:\\Users\\user\\Desktop\\web\\bracket-accounts\\web-app\\firestore.rules"],"optionalArgs":["port","webchannel_port","host","rules","functions_emulator","seed_from_export"],"joinArgs":false} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"C:\\\\Users\\\\user\\\\.cache\\\\firebase\\\\emulators\\\\cloud-firestore-emulator-v1.14.4.jar\",\"--host\",\"localhost\",\"--port\",8080,\"--rules\",\"C:\\\\Users\\\\user\\\\Desktop\\\\web\\\\bracket-accounts\\\\web-app\\\\firestore.rules\"],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"functions_emulator\",\"seed_from_export\"],\"joinArgs\":false}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to \u001b[1mfirestore-debug.log\u001b[22m"}}
[warn] !  ui: Emulator UI unable to start on port 4000, starting on 4004 instead. {"metadata":{"emulator":{"name":"ui"},"message":"Emulator UI unable to start on port 4000, starting on 4004 instead."}}
[debug] [2022-09-09T20:29:42.511Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"ui"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2022-09-09T20:29:42.511Z] Ignoring unsupported arg: port {"metadata":{"emulator":{"name":"ui"},"message":"Ignoring unsupported arg: port"}}
[debug] [2022-09-09T20:29:42.511Z] Starting Emulator UI with command {"binary":"node","args":["C:\\Users\\user\\.cache\\firebase\\emulators\\ui-v1.8.1\\server\\server.js"],"optionalArgs":[],"joinArgs":false} {"metadata":{"emulator":{"name":"ui"},"message":"Starting Emulator UI with command {\"binary\":\"node\",\"args\":[\"C:\\\\Users\\\\user\\\\.cache\\\\firebase\\\\emulators\\\\ui-v1.8.1\\\\server\\\\server.js\"],\"optionalArgs\":[],\"joinArgs\":false}"}}
[info] i  ui: Emulator UI logging to ui-debug.log {"metadata":{"emulator":{"name":"ui"},"message":"Emulator UI logging to \u001b[1mui-debug.log\u001b[22m"}}
[debug] [2022-09-09T20:29:42.753Z] Web / API server started at localhost:4004
 {"metadata":{"emulator":{"name":"ui"},"message":"Web / API server started at localhost:4004\n"}}
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://localhost:4004                │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ localhost:8080 │ http://localhost:4004/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub running at localhost:4400
  Other reserved ports: 4500

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[info] i  firestore: Change detected, updating rules... 
[debug] [2022-09-09T21:24:18.389Z] >>> [apiv2][query] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules [none]
[debug] [2022-09-09T21:24:18.390Z] >>> [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // match /{document=**} {\r\n    //   allow read, write: if true\r\n    //       // request.time < timestamp.date(2022, 2, 19);\r\n\r\n    // }\r\n\r\n    function numberValue(field){\r\n      return field is int || field is float\r\n    }\r\n\r\n    function optionalNumber(field){\r\n      return request.resource.data.get(field, 0) is int || \r\n        request.resource.data.get(field, 0.0) is float\r\n    }\r\n\r\n    match /users/{userId} {\r\n      allow read, create, update: if request.auth.uid == request.resource.data.uid \r\n    }\r\n\r\n    match /organizations/{orgId} {\r\n      function isOrgOwner(){\r\n         return resource.data.owner == request.auth.uid;\r\n      }\r\n\r\n      function verifyOrgData(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['owner', 'status', 'createdAt', 'modifiedAt', 'createdBy', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.keys().hasAll(allFields) &&\r\n          request.resource.data.keys().hasOnly(allFields) &&\r\n          request.resource.data.name is string &&\r\n          request.resource.data.businessTypeId is string &&\r\n          request.resource.data.businessType is map &&\r\n          request.resource.data.industry is string &&\r\n          request.resource.data.phone is string &&\r\n          request.resource.data.website is string &&\r\n          request.resource.data.country is string &&\r\n          request.resource.data.state is string &&\r\n          request.resource.data.city is string &&\r\n          request.resource.data.postalCode is string &&\r\n          request.resource.data.street is string &&\r\n          request.resource.data.owner is string &&\r\n          request.resource.data.status is string &&\r\n          request.resource.data.createdAt is timestamp &&\r\n          request.resource.data.modifiedAt is timestamp &&\r\n          request.resource.data.createdBy is string &&\r\n          request.resource.data.modifiedBy is string \r\n      }\r\n\r\n      function allowOrgUpdate(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['status', 'modifiedAt', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n      }\r\n\r\n      allow read: if isOrgOwner()\r\n      allow create: if request.auth != null && verifyOrgData()\r\n      allow update: if isOrgOwner() && verifyOrgData() && allowOrgUpdate()\r\n\r\n      function getOrgData(){\r\n        return get(/databases/$(database)/documents/organizations/$(orgId)).data\r\n      }\r\n\r\n      function isOwner(){\r\n        return request.auth.uid == getOrgData().owner\r\n      }\r\n\r\n      match /summaries/aggregate {\r\n        function verifyCountersData(){\r\n          let req1=[\"invoices\", \"deletedInvoices\", \"payments\",\"deletedPayments\", \"items\", \"customers\"];\r\n          let req2=['invoicesTotal', 'paymentsTotal', 'paymentModes', 'accounts'];\r\n          let required=req1.concat(req2);\r\n          \r\n          return request.resource.data.keys().hasAll(required) &&\r\n            numberValue(request.resource.data.invoices) &&\r\n            numberValue(request.resource.data.deletedInvoices) &&\r\n            numberValue(request.resource.data.payments) &&\r\n            numberValue(request.resource.data.deletedPayments) &&\r\n            numberValue(request.resource.data.items) &&\r\n            numberValue(request.resource.data.customers) &&\r\n            numberValue(request.resource.data.invoicesTotal) &&\r\n            numberValue(request.resource.data.paymentsTotal) &&\r\n            request.resource.data.paymentModes is map &&\r\n            request.resource.data.accounts is map\r\n        }\r\n\r\n\r\n        allow create: if request.auth != null && verifyCountersData()\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() && verifyCountersData()\r\n      }\r\n\r\n      match /orgDetails/{detailId} {\r\n        allow create: if request.auth != null\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() \r\n      }\r\n\r\n      match /accounts/{accountId} {\r\n        function verifyAccountData(){\r\n          let required=[\"accountType\", \"name\", \"amount\", \"description\", \"tags\"];\r\n          let additional=[\"status\", \"createdAt\", \"modifiedAt\", 'createdBy', 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.accountType is map &&\r\n            request.resource.data.accountType.id is string &&\r\n            request.resource.data.accountType.main is string &&\r\n            request.resource.data.accountType.name is string &&\r\n            request.resource.data.name is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.description is string &&\r\n            request.resource.data.tags is list\r\n        }\r\n\r\n        function allowAccountUpdate(){\r\n          let required=[\"name\", \"amount\", \"description\"];\r\n          let additional=[\"status\", \"modifiedAt\", 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if request.auth != null && verifyAccountData()\r\n        allow update: if isOwner() && verifyAccountData() && allowAccountUpdate()\r\n\r\n        match /transactions/{transactionId}{\r\n          allow read:if true\r\n        }\r\n      }\r\n      \r\n\r\n      match /items/{itemId} {\r\n        function getFixedValues(){\r\n          return ['createdBy', 'createdAt'];\r\n        }\r\n\r\n        function verifyItemData(){\r\n          let form1=['name', 'type', 'sku', 'skuOption', 'unit'];\r\n          let form2=['sellingPrice', 'salesAccount'];\r\n          let additional=['status', 'createdBy', 'createdAt', 'modifiedBy',  'modifiedAt'];\r\n          let optional=['variant', 'costPrice', 'salesTax', \"salesTaxType\", 'extraDetails'];\r\n          let required=form1.concat(form2).concat(additional);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.sku is string &&\r\n            request.resource.data.skuOption is string &&\r\n            request.resource.data.unit is string &&\r\n            numberValue(request.resource.data.sellingPrice) &&\r\n            request.resource.data.salesAccount is map &&\r\n            request.resource.data.get(\"variant\", '') is string &&\r\n            optionalNumber(\"costPrice\") &&\r\n            request.resource.data.get('salesTax', {}) is map &&\r\n            request.resource.data.get(\"salesTaxType\", \"\") is string &&\r\n            request.resource.data.get(\"extraDetails\", \"\") is string &&  \r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp        \r\n        }\r\n\r\n        function allowItemUpdate(){\r\n         let fixed=getFixedValues();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner();\r\n        allow create: if isOwner() && verifyItemData();\r\n        allow update: if isOwner() && verifyItemData() && allowItemUpdate()\r\n      }\r\n\r\n      match /taxes/{taxId} {\r\n        function verifyTaxData(){\r\n          let general=['name', 'rate', 'status', 'createdAt', 'createdBy', 'modifiedBy', 'modifiedAt'];\r\n          \r\n          return request.resource.data.keys().hasAll(general) &&\r\n            request.resource.data.keys().hasOnly(general) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.rate is int &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp\r\n        }\r\n\r\n        function allowTaxUpdate(){\r\n          let general=['name', 'rate', 'status', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(general)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyTaxData()\r\n        allow update: if isOwner() && verifyTaxData() && allowTaxUpdate()\r\n\r\n      }\r\n\r\n      match /journals/{entryId} {\r\n        function verifyJournalData(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"date\", \"status\", \"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(required) &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.amountState is string &&\r\n            request.resource.data.date is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountType is map &&\r\n            request.resource.data.account.name is string &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.debit) &&\r\n            numberValue(request.resource.data.credit) &&\r\n            request.resource.data.transactionId is string &&\r\n            request.resource.data.transactionDetails is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowJournalUpdate(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"status\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(required)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyJournalData()\r\n        allow update: if isOwner() && verifyJournalData() && allowJournalUpdate()\r\n        allow delete: if isOwner()\r\n      }\r\n\r\n      match /customers/{customerId} {\r\n        function customerFixed(){\r\n          return ['createdAt', 'createdBy'];\r\n        }\r\n        function verifyCustomerData(){\r\n          let details=['type','salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['openingBalance', 'paymentTerm', 'website', 'remarks'];\r\n          let fixed=customerFixed();\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'].concat(fixed);\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            numberValue(request.resource.data.openingBalance) &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.invoices is int &&\r\n            request.resource.data.summary.deletedInvoices is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.invoicedAmount) &&\r\n            numberValue(request.resource.data.summary.invoicePayments) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowCustomerUpdate(){\r\n          let fixed=customerFixed();\r\n          let allFields=[\"openingBalance\"].concat(fixed);\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt', \"summary\"];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyCustomerData()\r\n        allow update: if isOwner() && verifyCustomerData() &&\r\n          (allowCustomerUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      match /vendors/{vendorId} {\r\n        function verifyVendorData(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'createdAt', 'createdBy', 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.bills is int &&\r\n            request.resource.data.summary.deletedBills is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            request.resource.data.summary.expenses is int &&\r\n            request.resource.data.summary.deletedExpenses is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.totalBills) &&\r\n            numberValue(request.resource.data.summary.totalPayments) &&\r\n            numberValue(request.resource.data.summary.totalExpenses) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowVendorUpdate(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyVendorData()\r\n        allow update: if isOwner() && verifyVendorData() &&\r\n          (allowVendorUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      function validateSalesSummary(data){\r\n        return data.summary is map &&\r\n          numberValue(data.summary.shipping) &&\r\n          numberValue(data.summary.adjustment) &&\r\n          numberValue(data.summary.subTotal) &&\r\n          numberValue(data.summary.totalAmount) &&\r\n          numberValue(data.summary.totalTax) &&\r\n          data.get(\"summary.taxes\", []) is list\r\n      }\r\n\r\n      match /invoices/{invoiceId} {\r\n        function balanceIsValid(){\r\n           return numberValue(request.resource.data.balance) &&\r\n            request.resource.data.balance >= 0 && \r\n            request.resource.data.balance <= request.resource.data.summary.totalAmount\r\n        }\r\n\r\n        function invoiceFixed(){\r\n          return ['org', 'transactionType', 'createdAt', 'createdBy'];\r\n        }\r\n        \r\n        function verifyInvoiceData(){\r\n          let form=['customer', 'invoiceDate', \"paymentTerm\", 'dueDate', 'selectedItems'];\r\n          let formExtras=['summary', \"balance\", 'paymentsReceived','paymentsIds','paymentsCount'];\r\n          let optional=['orderNumber', 'subject', 'customerNotes'];\r\n          let meta=['status', \"isSent\", 'modifiedAt', 'modifiedBy'];\r\n          let fixed=invoiceFixed();\r\n          let required=form.concat(formExtras).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.selectedItems is list &&\r\n            request.resource.data.paymentsReceived is map &&\r\n            request.resource.data.paymentsIds is list &&\r\n            request.resource.data.paymentsCount is int &&\r\n            request.resource.data.summary is map &&\r\n            optionalNumber(\"summary.shipping\") &&\r\n            optionalNumber(\"summary.adjustment\") &&\r\n            optionalNumber(\"summary.subTotal\") &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            optionalNumber(\"summary.totalTax\") &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.paymentTerm.value is string &&\r\n            request.resource.data.invoiceDate is timestamp &&\r\n            request.resource.data.dueDate is timestamp &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.get(\"customerNotes\", \"\")  is string &&\r\n            request.resource.data.get(\"orderNumber\", \"\") is string &&\r\n            request.resource.data.get(\"subject\", \"\") is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.transactionType is string &&\r\n            balanceIsValid()\r\n        }\r\n\r\n        \r\n\r\n        function allowInvoiceUpdate(){\r\n          let fixedFields=invoiceFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixedFields)\r\n        }\r\n\r\n        function invoiceIsPaid(){\r\n          return request.resource.data.paymentsCount > 0 ||\r\n            request.resource.data.balance < request.resource.data.summary.totalAmount\r\n        }\r\n        function allowCustomerChange(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.customer.customerId != resource.data.customer.customerId\r\n        }\r\n        function allowDelete(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.status == \"deleted\"\r\n        }\r\n        function allowNormalUpdate(){\r\n          return request.resource.data.status != \"deleted\" &&\r\n            request.resource.data.customer.customerId == resource.data.customer.customerId\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyInvoiceData()\r\n        allow update: if isOwner() && verifyInvoiceData() && allowInvoiceUpdate() &&\r\n          (allowNormalUpdate() || allowCustomerChange() || allowDelete())\r\n        allow delete: if isOwner() &&\r\n          resource.data.transactionType == \"customer_opening_balance\"\r\n      }\r\n\r\n     \r\n      match /payments/{paymentId} {\r\n        function paymentsFixed(){\r\n          return ['org', 'createdBy', \"createdAt\"];\r\n        }\r\n\r\n        function verifyPaymentData(){\r\n          let form=['account', 'amount', 'customer', 'paymentDate', \"paymentMode\"];\r\n          let details=[\"payments\", \"paidInvoicesIds\", 'excess'];\r\n          let meta=['status', 'modifiedBy', \"modifiedAt\", \"transactionType\"];\r\n          let optional=['reference'];\r\n          let fixed=paymentsFixed();\r\n          let required=form.concat(details).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            numberValue(request.resource.data.excess) &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentDate is timestamp &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.paymentMode.value is string &&\r\n            request.resource.data.payments is map &&\r\n            request.resource.data.paidInvoicesIds is list &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.get(\"reference\", \"\") is string\r\n            // numberValue(request.resource.data.bankCharges) &&\r\n            // request.resource.data.taxDeducted is string &&\r\n            // request.resource.data.tdsTaxAccount is string \r\n\r\n        }\r\n\r\n        function allowPaymentUpdate(){\r\n          let fixed=paymentsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyPaymentData()\r\n        allow update: if isOwner() && verifyPaymentData() && allowPaymentUpdate()\r\n      }\r\n\r\n      match /salesReceipts/{receiptId} {\r\n        function salesReceiptsFixed(){\r\n          return ['createdAt', 'createdBy', 'org', 'transactionType'];\r\n        }\r\n        function verifySalesReceiptData(){\r\n          let form=[\"receiptDate\", \"account\", 'paymentMode', \"reference\", 'customerNotes'];\r\n          let optional=[\"customer\"];\r\n          let sale=['selectedItems', 'summary'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'isSent', 'status'];\r\n          let fixed=salesReceiptsFixed();\r\n          let required=form.concat(sale).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.get(\"customer\", {}) is map &&\r\n            request.resource.data.receiptDate is timestamp &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.customerNotes is string &&\r\n            request.resource.data.selectedItems is list &&\r\n            validateSalesSummary(request.resource.data) &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.status is string\r\n        }\r\n\r\n        function allowSalesReceiptUpdate(){\r\n          let fixed=salesReceiptsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifySalesReceiptData()\r\n        allow update: if isOwner() && verifySalesReceiptData() &&\r\n          allowSalesReceiptUpdate()\r\n      }\r\n\r\n      match /expenses/{expenseId} {\r\n        function expenseFixed(){\r\n          return ['createdAt', 'createdBy', 'org'];\r\n        }\r\n        function verifyExpenseData(){\r\n          let form=[\"expenseDate\", \"paymentAccount\", 'paymentMode', \"reference\"];\r\n          let optional=['vendor'];\r\n          let expense=['items', 'summary', 'transactionType', 'taxType'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'status'];\r\n          let fixed=expenseFixed();\r\n          let required=form.concat(expense).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.expenseDate is timestamp &&\r\n            request.resource.data.paymentAccount is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.get('vendor', {}) is map &&\r\n            request.resource.data.items is list &&\r\n            request.resource.data.summary is map &&\r\n            numberValue(request.resource.data.summary.subTotal) &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            numberValue(request.resource.data.summary.totalTax) &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.taxType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map \r\n        }\r\n\r\n        function allowExpenseUpdate(){\r\n          let fixed=expenseFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyExpenseData()\r\n        allow update: if isOwner() && verifyExpenseData() &&\r\n          allowExpenseUpdate()\r\n      }\r\n    }\r\n  }\r\n}"}]}}
[debug] [2022-09-09T21:24:20.528Z] <<< [apiv2][status] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules 200
[debug] [2022-09-09T21:24:20.528Z] <<< [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2022-09-09T21:28:36.704Z] >>> [apiv2][query] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules [none]
[debug] [2022-09-09T21:28:36.704Z] >>> [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // match /{document=**} {\r\n    //   allow read, write: if true\r\n    //       // request.time < timestamp.date(2022, 2, 19);\r\n\r\n    // }\r\n\r\n    function numberValue(field){\r\n      return field is int || field is float\r\n    }\r\n\r\n    function optionalNumber(field){\r\n      return request.resource.data.get(field, 0) is int || \r\n        request.resource.data.get(field, 0.0) is float\r\n    }\r\n\r\n    match /users/{userId} {\r\n      allow read, create, update: if request.auth.uid == request.resource.data.uid \r\n    }\r\n\r\n    match /organizations/{orgId} {\r\n      function isOrgOwner(){\r\n         return resource.data.owner == request.auth.uid;\r\n      }\r\n\r\n      function verifyOrgData(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['owner', 'status', 'createdAt', 'modifiedAt', 'createdBy', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.keys().hasAll(allFields) &&\r\n          request.resource.data.keys().hasOnly(allFields) &&\r\n          request.resource.data.name is string &&\r\n          request.resource.data.businessTypeId is string &&\r\n          request.resource.data.businessType is map &&\r\n          request.resource.data.industry is string &&\r\n          request.resource.data.phone is string &&\r\n          request.resource.data.website is string &&\r\n          request.resource.data.country is string &&\r\n          request.resource.data.state is string &&\r\n          request.resource.data.city is string &&\r\n          request.resource.data.postalCode is string &&\r\n          request.resource.data.street is string &&\r\n          request.resource.data.owner is string &&\r\n          request.resource.data.status is string &&\r\n          request.resource.data.createdAt is timestamp &&\r\n          request.resource.data.modifiedAt is timestamp &&\r\n          request.resource.data.createdBy is string &&\r\n          request.resource.data.modifiedBy is string \r\n      }\r\n\r\n      function allowOrgUpdate(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['status', 'modifiedAt', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n      }\r\n\r\n      allow read: if isOrgOwner()\r\n      allow create: if request.auth != null && verifyOrgData()\r\n      allow update: if isOrgOwner() && verifyOrgData() && allowOrgUpdate()\r\n\r\n      function getOrgData(){\r\n        return get(/databases/$(database)/documents/organizations/$(orgId)).data\r\n      }\r\n\r\n      function isOwner(){\r\n        return request.auth.uid == getOrgData().owner\r\n      }\r\n\r\n      match /summaries/aggregate {\r\n        function verifyCountersData(){\r\n          let req1=[\"invoices\", \"deletedInvoices\", \"payments\",\"deletedPayments\", \"items\", \"customers\"];\r\n          let req2=['invoicesTotal', 'paymentsTotal', 'paymentModes', 'accounts'];\r\n          let required=req1.concat(req2);\r\n          \r\n          return request.resource.data.keys().hasAll(required) \r\n            // numberValue(request.resource.data.invoices) &&\r\n            // numberValue(request.resource.data.deletedInvoices) &&\r\n            // numberValue(request.resource.data.payments) &&\r\n            // numberValue(request.resource.data.deletedPayments) &&\r\n            // numberValue(request.resource.data.items) &&\r\n            // numberValue(request.resource.data.customers) &&\r\n            // numberValue(request.resource.data.invoicesTotal) &&\r\n            // numberValue(request.resource.data.paymentsTotal) &&\r\n            // request.resource.data.paymentModes is map &&\r\n            // request.resource.data.accounts is map\r\n        }\r\n\r\n\r\n        allow create: if request.auth != null && verifyCountersData()\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() && verifyCountersData()\r\n      }\r\n\r\n      match /orgDetails/{detailId} {\r\n        allow create: if request.auth != null\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() \r\n      }\r\n\r\n      match /accounts/{accountId} {\r\n        function verifyAccountData(){\r\n          let required=[\"accountType\", \"name\", \"amount\", \"description\", \"tags\"];\r\n          let additional=[\"status\", \"createdAt\", \"modifiedAt\", 'createdBy', 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.accountType is map &&\r\n            request.resource.data.accountType.id is string &&\r\n            request.resource.data.accountType.main is string &&\r\n            request.resource.data.accountType.name is string &&\r\n            request.resource.data.name is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.description is string &&\r\n            request.resource.data.tags is list\r\n        }\r\n\r\n        function allowAccountUpdate(){\r\n          let required=[\"name\", \"amount\", \"description\"];\r\n          let additional=[\"status\", \"modifiedAt\", 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if request.auth != null && verifyAccountData()\r\n        allow update: if isOwner() && verifyAccountData() && allowAccountUpdate()\r\n\r\n        match /transactions/{transactionId}{\r\n          allow read:if true\r\n        }\r\n      }\r\n      \r\n\r\n      match /items/{itemId} {\r\n        function getFixedValues(){\r\n          return ['createdBy', 'createdAt'];\r\n        }\r\n\r\n        function verifyItemData(){\r\n          let form1=['name', 'type', 'sku', 'skuOption', 'unit'];\r\n          let form2=['sellingPrice', 'salesAccount'];\r\n          let additional=['status', 'createdBy', 'createdAt', 'modifiedBy',  'modifiedAt'];\r\n          let optional=['variant', 'costPrice', 'salesTax', \"salesTaxType\", 'extraDetails'];\r\n          let required=form1.concat(form2).concat(additional);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.sku is string &&\r\n            request.resource.data.skuOption is string &&\r\n            request.resource.data.unit is string &&\r\n            numberValue(request.resource.data.sellingPrice) &&\r\n            request.resource.data.salesAccount is map &&\r\n            request.resource.data.get(\"variant\", '') is string &&\r\n            optionalNumber(\"costPrice\") &&\r\n            request.resource.data.get('salesTax', {}) is map &&\r\n            request.resource.data.get(\"salesTaxType\", \"\") is string &&\r\n            request.resource.data.get(\"extraDetails\", \"\") is string &&  \r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp        \r\n        }\r\n\r\n        function allowItemUpdate(){\r\n         let fixed=getFixedValues();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner();\r\n        allow create: if isOwner() && verifyItemData();\r\n        allow update: if isOwner() && verifyItemData() && allowItemUpdate()\r\n      }\r\n\r\n      match /taxes/{taxId} {\r\n        function verifyTaxData(){\r\n          let general=['name', 'rate', 'status', 'createdAt', 'createdBy', 'modifiedBy', 'modifiedAt'];\r\n          \r\n          return request.resource.data.keys().hasAll(general) &&\r\n            request.resource.data.keys().hasOnly(general) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.rate is int &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp\r\n        }\r\n\r\n        function allowTaxUpdate(){\r\n          let general=['name', 'rate', 'status', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(general)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyTaxData()\r\n        allow update: if isOwner() && verifyTaxData() && allowTaxUpdate()\r\n\r\n      }\r\n\r\n      match /journals/{entryId} {\r\n        function verifyJournalData(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"date\", \"status\", \"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(required) &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.amountState is string &&\r\n            request.resource.data.date is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountType is map &&\r\n            request.resource.data.account.name is string &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.debit) &&\r\n            numberValue(request.resource.data.credit) &&\r\n            request.resource.data.transactionId is string &&\r\n            request.resource.data.transactionDetails is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowJournalUpdate(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"status\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(required)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyJournalData()\r\n        allow update: if isOwner() && verifyJournalData() && allowJournalUpdate()\r\n        allow delete: if isOwner()\r\n      }\r\n\r\n      match /customers/{customerId} {\r\n        function customerFixed(){\r\n          return ['createdAt', 'createdBy'];\r\n        }\r\n        function verifyCustomerData(){\r\n          let details=['type','salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['openingBalance', 'paymentTerm', 'website', 'remarks'];\r\n          let fixed=customerFixed();\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'].concat(fixed);\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            numberValue(request.resource.data.openingBalance) &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.invoices is int &&\r\n            request.resource.data.summary.deletedInvoices is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.invoicedAmount) &&\r\n            numberValue(request.resource.data.summary.invoicePayments) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowCustomerUpdate(){\r\n          let fixed=customerFixed();\r\n          let allFields=[\"openingBalance\"].concat(fixed);\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt', \"summary\"];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyCustomerData()\r\n        allow update: if isOwner() && verifyCustomerData() &&\r\n          (allowCustomerUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      match /vendors/{vendorId} {\r\n        function verifyVendorData(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'createdAt', 'createdBy', 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.bills is int &&\r\n            request.resource.data.summary.deletedBills is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            request.resource.data.summary.expenses is int &&\r\n            request.resource.data.summary.deletedExpenses is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.totalBills) &&\r\n            numberValue(request.resource.data.summary.totalPayments) &&\r\n            numberValue(request.resource.data.summary.totalExpenses) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowVendorUpdate(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyVendorData()\r\n        allow update: if isOwner() && verifyVendorData() &&\r\n          (allowVendorUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      function validateSalesSummary(data){\r\n        return data.summary is map &&\r\n          numberValue(data.summary.shipping) &&\r\n          numberValue(data.summary.adjustment) &&\r\n          numberValue(data.summary.subTotal) &&\r\n          numberValue(data.summary.totalAmount) &&\r\n          numberValue(data.summary.totalTax) &&\r\n          data.get(\"summary.taxes\", []) is list\r\n      }\r\n\r\n      match /invoices/{invoiceId} {\r\n        function balanceIsValid(){\r\n           return numberValue(request.resource.data.balance) &&\r\n            request.resource.data.balance >= 0 && \r\n            request.resource.data.balance <= request.resource.data.summary.totalAmount\r\n        }\r\n\r\n        function invoiceFixed(){\r\n          return ['org', 'transactionType', 'createdAt', 'createdBy'];\r\n        }\r\n        \r\n        function verifyInvoiceData(){\r\n          let form=['customer', 'invoiceDate', \"paymentTerm\", 'dueDate', 'selectedItems'];\r\n          let formExtras=['summary', \"balance\", 'paymentsReceived','paymentsIds','paymentsCount'];\r\n          let optional=['orderNumber', 'subject', 'customerNotes'];\r\n          let meta=['status', \"isSent\", 'modifiedAt', 'modifiedBy'];\r\n          let fixed=invoiceFixed();\r\n          let required=form.concat(formExtras).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.selectedItems is list &&\r\n            request.resource.data.paymentsReceived is map &&\r\n            request.resource.data.paymentsIds is list &&\r\n            request.resource.data.paymentsCount is int &&\r\n            request.resource.data.summary is map &&\r\n            optionalNumber(\"summary.shipping\") &&\r\n            optionalNumber(\"summary.adjustment\") &&\r\n            optionalNumber(\"summary.subTotal\") &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            optionalNumber(\"summary.totalTax\") &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.paymentTerm.value is string &&\r\n            request.resource.data.invoiceDate is timestamp &&\r\n            request.resource.data.dueDate is timestamp &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.get(\"customerNotes\", \"\")  is string &&\r\n            request.resource.data.get(\"orderNumber\", \"\") is string &&\r\n            request.resource.data.get(\"subject\", \"\") is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.transactionType is string &&\r\n            balanceIsValid()\r\n        }\r\n\r\n        \r\n\r\n        function allowInvoiceUpdate(){\r\n          let fixedFields=invoiceFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixedFields)\r\n        }\r\n\r\n        function invoiceIsPaid(){\r\n          return request.resource.data.paymentsCount > 0 ||\r\n            request.resource.data.balance < request.resource.data.summary.totalAmount\r\n        }\r\n        function allowCustomerChange(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.customer.customerId != resource.data.customer.customerId\r\n        }\r\n        function allowDelete(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.status == \"deleted\"\r\n        }\r\n        function allowNormalUpdate(){\r\n          return request.resource.data.status != \"deleted\" &&\r\n            request.resource.data.customer.customerId == resource.data.customer.customerId\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyInvoiceData()\r\n        allow update: if isOwner() && verifyInvoiceData() && allowInvoiceUpdate() &&\r\n          (allowNormalUpdate() || allowCustomerChange() || allowDelete())\r\n        allow delete: if isOwner() &&\r\n          resource.data.transactionType == \"customer_opening_balance\"\r\n      }\r\n\r\n     \r\n      match /payments/{paymentId} {\r\n        function paymentsFixed(){\r\n          return ['org', 'createdBy', \"createdAt\"];\r\n        }\r\n\r\n        function verifyPaymentData(){\r\n          let form=['account', 'amount', 'customer', 'paymentDate', \"paymentMode\"];\r\n          let details=[\"payments\", \"paidInvoicesIds\", 'excess'];\r\n          let meta=['status', 'modifiedBy', \"modifiedAt\", \"transactionType\"];\r\n          let optional=['reference'];\r\n          let fixed=paymentsFixed();\r\n          let required=form.concat(details).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            numberValue(request.resource.data.excess) &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentDate is timestamp &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.paymentMode.value is string &&\r\n            request.resource.data.payments is map &&\r\n            request.resource.data.paidInvoicesIds is list &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.get(\"reference\", \"\") is string\r\n            // numberValue(request.resource.data.bankCharges) &&\r\n            // request.resource.data.taxDeducted is string &&\r\n            // request.resource.data.tdsTaxAccount is string \r\n\r\n        }\r\n\r\n        function allowPaymentUpdate(){\r\n          let fixed=paymentsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyPaymentData()\r\n        allow update: if isOwner() && verifyPaymentData() && allowPaymentUpdate()\r\n      }\r\n\r\n      match /salesReceipts/{receiptId} {\r\n        function salesReceiptsFixed(){\r\n          return ['createdAt', 'createdBy', 'org', 'transactionType'];\r\n        }\r\n        function verifySalesReceiptData(){\r\n          let form=[\"receiptDate\", \"account\", 'paymentMode', \"reference\", 'customerNotes'];\r\n          let optional=[\"customer\"];\r\n          let sale=['selectedItems', 'summary'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'isSent', 'status'];\r\n          let fixed=salesReceiptsFixed();\r\n          let required=form.concat(sale).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.get(\"customer\", {}) is map &&\r\n            request.resource.data.receiptDate is timestamp &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.customerNotes is string &&\r\n            request.resource.data.selectedItems is list &&\r\n            validateSalesSummary(request.resource.data) &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.status is string\r\n        }\r\n\r\n        function allowSalesReceiptUpdate(){\r\n          let fixed=salesReceiptsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifySalesReceiptData()\r\n        allow update: if isOwner() && verifySalesReceiptData() &&\r\n          allowSalesReceiptUpdate()\r\n      }\r\n\r\n      match /expenses/{expenseId} {\r\n        function expenseFixed(){\r\n          return ['createdAt', 'createdBy', 'org'];\r\n        }\r\n        function verifyExpenseData(){\r\n          let form=[\"expenseDate\", \"paymentAccount\", 'paymentMode', \"reference\"];\r\n          let optional=['vendor'];\r\n          let expense=['items', 'summary', 'transactionType', 'taxType'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'status'];\r\n          let fixed=expenseFixed();\r\n          let required=form.concat(expense).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.expenseDate is timestamp &&\r\n            request.resource.data.paymentAccount is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.get('vendor', {}) is map &&\r\n            request.resource.data.items is list &&\r\n            request.resource.data.summary is map &&\r\n            numberValue(request.resource.data.summary.subTotal) &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            numberValue(request.resource.data.summary.totalTax) &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.taxType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map \r\n        }\r\n\r\n        function allowExpenseUpdate(){\r\n          let fixed=expenseFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyExpenseData()\r\n        allow update: if isOwner() && verifyExpenseData() &&\r\n          allowExpenseUpdate()\r\n      }\r\n    }\r\n  }\r\n}"}]}}
[debug] [2022-09-09T21:28:37.595Z] <<< [apiv2][status] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules 200
[debug] [2022-09-09T21:28:37.595Z] <<< [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2022-09-09T21:30:32.268Z] >>> [apiv2][query] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules [none]
[debug] [2022-09-09T21:30:32.269Z] >>> [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // match /{document=**} {\r\n    //   allow read, write: if true\r\n    //       // request.time < timestamp.date(2022, 2, 19);\r\n\r\n    // }\r\n\r\n    function numberValue(field){\r\n      return field is int || field is float\r\n    }\r\n\r\n    function optionalNumber(field){\r\n      return request.resource.data.get(field, 0) is int || \r\n        request.resource.data.get(field, 0.0) is float\r\n    }\r\n\r\n    match /users/{userId} {\r\n      allow read, create, update: if request.auth.uid == request.resource.data.uid \r\n    }\r\n\r\n    match /organizations/{orgId} {\r\n      function isOrgOwner(){\r\n         return resource.data.owner == request.auth.uid;\r\n      }\r\n\r\n      function verifyOrgData(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['owner', 'status', 'createdAt', 'modifiedAt', 'createdBy', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.keys().hasAll(allFields) &&\r\n          request.resource.data.keys().hasOnly(allFields) &&\r\n          request.resource.data.name is string &&\r\n          request.resource.data.businessTypeId is string &&\r\n          request.resource.data.businessType is map &&\r\n          request.resource.data.industry is string &&\r\n          request.resource.data.phone is string &&\r\n          request.resource.data.website is string &&\r\n          request.resource.data.country is string &&\r\n          request.resource.data.state is string &&\r\n          request.resource.data.city is string &&\r\n          request.resource.data.postalCode is string &&\r\n          request.resource.data.street is string &&\r\n          request.resource.data.owner is string &&\r\n          request.resource.data.status is string &&\r\n          request.resource.data.createdAt is timestamp &&\r\n          request.resource.data.modifiedAt is timestamp &&\r\n          request.resource.data.createdBy is string &&\r\n          request.resource.data.modifiedBy is string \r\n      }\r\n\r\n      function allowOrgUpdate(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['status', 'modifiedAt', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n      }\r\n\r\n      allow read: if isOrgOwner()\r\n      allow create: if request.auth != null && verifyOrgData()\r\n      allow update: if isOrgOwner() && verifyOrgData() && allowOrgUpdate()\r\n\r\n      function getOrgData(){\r\n        return get(/databases/$(database)/documents/organizations/$(orgId)).data\r\n      }\r\n\r\n      function isOwner(){\r\n        return request.auth.uid == getOrgData().owner\r\n      }\r\n\r\n      match /summaries/aggregate {\r\n        function verifyCountersData(){\r\n          let req1=[\"invoices\", \"deletedInvoices\", \"payments\",\"deletedPayments\", \"items\", \"customers\"];\r\n          let req2=['invoicesTotal', 'paymentsTotal', 'paymentModes', 'accounts'];\r\n          let required=req1.concat(req2);\r\n          \r\n          return numberValue(request.resource.data.invoices) &&\r\n            numberValue(request.resource.data.deletedInvoices) &&\r\n            numberValue(request.resource.data.payments) &&\r\n            numberValue(request.resource.data.deletedPayments) &&\r\n            numberValue(request.resource.data.items) &&\r\n            numberValue(request.resource.data.customers) &&\r\n            numberValue(request.resource.data.invoicesTotal) &&\r\n            numberValue(request.resource.data.paymentsTotal) &&\r\n            request.resource.data.paymentModes is map &&\r\n            request.resource.data.accounts is map\r\n        }\r\n\r\n\r\n        allow create: if request.auth != null && verifyCountersData()\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() && verifyCountersData()\r\n      }\r\n\r\n      match /orgDetails/{detailId} {\r\n        allow create: if request.auth != null\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() \r\n      }\r\n\r\n      match /accounts/{accountId} {\r\n        function verifyAccountData(){\r\n          let required=[\"accountType\", \"name\", \"amount\", \"description\", \"tags\"];\r\n          let additional=[\"status\", \"createdAt\", \"modifiedAt\", 'createdBy', 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.accountType is map &&\r\n            request.resource.data.accountType.id is string &&\r\n            request.resource.data.accountType.main is string &&\r\n            request.resource.data.accountType.name is string &&\r\n            request.resource.data.name is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.description is string &&\r\n            request.resource.data.tags is list\r\n        }\r\n\r\n        function allowAccountUpdate(){\r\n          let required=[\"name\", \"amount\", \"description\"];\r\n          let additional=[\"status\", \"modifiedAt\", 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if request.auth != null && verifyAccountData()\r\n        allow update: if isOwner() && verifyAccountData() && allowAccountUpdate()\r\n\r\n        match /transactions/{transactionId}{\r\n          allow read:if true\r\n        }\r\n      }\r\n      \r\n\r\n      match /items/{itemId} {\r\n        function getFixedValues(){\r\n          return ['createdBy', 'createdAt'];\r\n        }\r\n\r\n        function verifyItemData(){\r\n          let form1=['name', 'type', 'sku', 'skuOption', 'unit'];\r\n          let form2=['sellingPrice', 'salesAccount'];\r\n          let additional=['status', 'createdBy', 'createdAt', 'modifiedBy',  'modifiedAt'];\r\n          let optional=['variant', 'costPrice', 'salesTax', \"salesTaxType\", 'extraDetails'];\r\n          let required=form1.concat(form2).concat(additional);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.sku is string &&\r\n            request.resource.data.skuOption is string &&\r\n            request.resource.data.unit is string &&\r\n            numberValue(request.resource.data.sellingPrice) &&\r\n            request.resource.data.salesAccount is map &&\r\n            request.resource.data.get(\"variant\", '') is string &&\r\n            optionalNumber(\"costPrice\") &&\r\n            request.resource.data.get('salesTax', {}) is map &&\r\n            request.resource.data.get(\"salesTaxType\", \"\") is string &&\r\n            request.resource.data.get(\"extraDetails\", \"\") is string &&  \r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp        \r\n        }\r\n\r\n        function allowItemUpdate(){\r\n         let fixed=getFixedValues();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner();\r\n        allow create: if isOwner() && verifyItemData();\r\n        allow update: if isOwner() && verifyItemData() && allowItemUpdate()\r\n      }\r\n\r\n      match /taxes/{taxId} {\r\n        function verifyTaxData(){\r\n          let general=['name', 'rate', 'status', 'createdAt', 'createdBy', 'modifiedBy', 'modifiedAt'];\r\n          \r\n          return request.resource.data.keys().hasAll(general) &&\r\n            request.resource.data.keys().hasOnly(general) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.rate is int &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp\r\n        }\r\n\r\n        function allowTaxUpdate(){\r\n          let general=['name', 'rate', 'status', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(general)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyTaxData()\r\n        allow update: if isOwner() && verifyTaxData() && allowTaxUpdate()\r\n\r\n      }\r\n\r\n      match /journals/{entryId} {\r\n        function verifyJournalData(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"date\", \"status\", \"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(required) &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.amountState is string &&\r\n            request.resource.data.date is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountType is map &&\r\n            request.resource.data.account.name is string &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.debit) &&\r\n            numberValue(request.resource.data.credit) &&\r\n            request.resource.data.transactionId is string &&\r\n            request.resource.data.transactionDetails is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowJournalUpdate(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"status\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(required)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyJournalData()\r\n        allow update: if isOwner() && verifyJournalData() && allowJournalUpdate()\r\n        allow delete: if isOwner()\r\n      }\r\n\r\n      match /customers/{customerId} {\r\n        function customerFixed(){\r\n          return ['createdAt', 'createdBy'];\r\n        }\r\n        function verifyCustomerData(){\r\n          let details=['type','salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['openingBalance', 'paymentTerm', 'website', 'remarks'];\r\n          let fixed=customerFixed();\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'].concat(fixed);\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            numberValue(request.resource.data.openingBalance) &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.invoices is int &&\r\n            request.resource.data.summary.deletedInvoices is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.invoicedAmount) &&\r\n            numberValue(request.resource.data.summary.invoicePayments) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowCustomerUpdate(){\r\n          let fixed=customerFixed();\r\n          let allFields=[\"openingBalance\"].concat(fixed);\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt', \"summary\"];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyCustomerData()\r\n        allow update: if isOwner() && verifyCustomerData() &&\r\n          (allowCustomerUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      match /vendors/{vendorId} {\r\n        function verifyVendorData(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'createdAt', 'createdBy', 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.bills is int &&\r\n            request.resource.data.summary.deletedBills is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            request.resource.data.summary.expenses is int &&\r\n            request.resource.data.summary.deletedExpenses is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.totalBills) &&\r\n            numberValue(request.resource.data.summary.totalPayments) &&\r\n            numberValue(request.resource.data.summary.totalExpenses) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowVendorUpdate(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyVendorData()\r\n        allow update: if isOwner() && verifyVendorData() &&\r\n          (allowVendorUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      function validateSalesSummary(data){\r\n        return data.summary is map &&\r\n          numberValue(data.summary.shipping) &&\r\n          numberValue(data.summary.adjustment) &&\r\n          numberValue(data.summary.subTotal) &&\r\n          numberValue(data.summary.totalAmount) &&\r\n          numberValue(data.summary.totalTax) &&\r\n          data.get(\"summary.taxes\", []) is list\r\n      }\r\n\r\n      match /invoices/{invoiceId} {\r\n        function balanceIsValid(){\r\n           return numberValue(request.resource.data.balance) &&\r\n            request.resource.data.balance >= 0 && \r\n            request.resource.data.balance <= request.resource.data.summary.totalAmount\r\n        }\r\n\r\n        function invoiceFixed(){\r\n          return ['org', 'transactionType', 'createdAt', 'createdBy'];\r\n        }\r\n        \r\n        function verifyInvoiceData(){\r\n          let form=['customer', 'invoiceDate', \"paymentTerm\", 'dueDate', 'selectedItems'];\r\n          let formExtras=['summary', \"balance\", 'paymentsReceived','paymentsIds','paymentsCount'];\r\n          let optional=['orderNumber', 'subject', 'customerNotes'];\r\n          let meta=['status', \"isSent\", 'modifiedAt', 'modifiedBy'];\r\n          let fixed=invoiceFixed();\r\n          let required=form.concat(formExtras).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.selectedItems is list &&\r\n            request.resource.data.paymentsReceived is map &&\r\n            request.resource.data.paymentsIds is list &&\r\n            request.resource.data.paymentsCount is int &&\r\n            request.resource.data.summary is map &&\r\n            optionalNumber(\"summary.shipping\") &&\r\n            optionalNumber(\"summary.adjustment\") &&\r\n            optionalNumber(\"summary.subTotal\") &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            optionalNumber(\"summary.totalTax\") &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.paymentTerm.value is string &&\r\n            request.resource.data.invoiceDate is timestamp &&\r\n            request.resource.data.dueDate is timestamp &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.get(\"customerNotes\", \"\")  is string &&\r\n            request.resource.data.get(\"orderNumber\", \"\") is string &&\r\n            request.resource.data.get(\"subject\", \"\") is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.transactionType is string &&\r\n            balanceIsValid()\r\n        }\r\n\r\n        \r\n\r\n        function allowInvoiceUpdate(){\r\n          let fixedFields=invoiceFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixedFields)\r\n        }\r\n\r\n        function invoiceIsPaid(){\r\n          return request.resource.data.paymentsCount > 0 ||\r\n            request.resource.data.balance < request.resource.data.summary.totalAmount\r\n        }\r\n        function allowCustomerChange(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.customer.customerId != resource.data.customer.customerId\r\n        }\r\n        function allowDelete(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.status == \"deleted\"\r\n        }\r\n        function allowNormalUpdate(){\r\n          return request.resource.data.status != \"deleted\" &&\r\n            request.resource.data.customer.customerId == resource.data.customer.customerId\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyInvoiceData()\r\n        allow update: if isOwner() && verifyInvoiceData() && allowInvoiceUpdate() &&\r\n          (allowNormalUpdate() || allowCustomerChange() || allowDelete())\r\n        allow delete: if isOwner() &&\r\n          resource.data.transactionType == \"customer_opening_balance\"\r\n      }\r\n\r\n     \r\n      match /payments/{paymentId} {\r\n        function paymentsFixed(){\r\n          return ['org', 'createdBy', \"createdAt\"];\r\n        }\r\n\r\n        function verifyPaymentData(){\r\n          let form=['account', 'amount', 'customer', 'paymentDate', \"paymentMode\"];\r\n          let details=[\"payments\", \"paidInvoicesIds\", 'excess'];\r\n          let meta=['status', 'modifiedBy', \"modifiedAt\", \"transactionType\"];\r\n          let optional=['reference'];\r\n          let fixed=paymentsFixed();\r\n          let required=form.concat(details).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            numberValue(request.resource.data.excess) &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentDate is timestamp &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.paymentMode.value is string &&\r\n            request.resource.data.payments is map &&\r\n            request.resource.data.paidInvoicesIds is list &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.get(\"reference\", \"\") is string\r\n            // numberValue(request.resource.data.bankCharges) &&\r\n            // request.resource.data.taxDeducted is string &&\r\n            // request.resource.data.tdsTaxAccount is string \r\n\r\n        }\r\n\r\n        function allowPaymentUpdate(){\r\n          let fixed=paymentsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyPaymentData()\r\n        allow update: if isOwner() && verifyPaymentData() && allowPaymentUpdate()\r\n      }\r\n\r\n      match /salesReceipts/{receiptId} {\r\n        function salesReceiptsFixed(){\r\n          return ['createdAt', 'createdBy', 'org', 'transactionType'];\r\n        }\r\n        function verifySalesReceiptData(){\r\n          let form=[\"receiptDate\", \"account\", 'paymentMode', \"reference\", 'customerNotes'];\r\n          let optional=[\"customer\"];\r\n          let sale=['selectedItems', 'summary'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'isSent', 'status'];\r\n          let fixed=salesReceiptsFixed();\r\n          let required=form.concat(sale).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.get(\"customer\", {}) is map &&\r\n            request.resource.data.receiptDate is timestamp &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.customerNotes is string &&\r\n            request.resource.data.selectedItems is list &&\r\n            validateSalesSummary(request.resource.data) &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.status is string\r\n        }\r\n\r\n        function allowSalesReceiptUpdate(){\r\n          let fixed=salesReceiptsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifySalesReceiptData()\r\n        allow update: if isOwner() && verifySalesReceiptData() &&\r\n          allowSalesReceiptUpdate()\r\n      }\r\n\r\n      match /expenses/{expenseId} {\r\n        function expenseFixed(){\r\n          return ['createdAt', 'createdBy', 'org'];\r\n        }\r\n        function verifyExpenseData(){\r\n          let form=[\"expenseDate\", \"paymentAccount\", 'paymentMode', \"reference\"];\r\n          let optional=['vendor'];\r\n          let expense=['items', 'summary', 'transactionType', 'taxType'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'status'];\r\n          let fixed=expenseFixed();\r\n          let required=form.concat(expense).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.expenseDate is timestamp &&\r\n            request.resource.data.paymentAccount is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.get('vendor', {}) is map &&\r\n            request.resource.data.items is list &&\r\n            request.resource.data.summary is map &&\r\n            numberValue(request.resource.data.summary.subTotal) &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            numberValue(request.resource.data.summary.totalTax) &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.taxType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map \r\n        }\r\n\r\n        function allowExpenseUpdate(){\r\n          let fixed=expenseFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyExpenseData()\r\n        allow update: if isOwner() && verifyExpenseData() &&\r\n          allowExpenseUpdate()\r\n      }\r\n    }\r\n  }\r\n}"}]}}
[debug] [2022-09-09T21:30:32.841Z] <<< [apiv2][status] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules 200
[debug] [2022-09-09T21:30:32.842Z] <<< [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":80,"column":15,"currentOffset":3301,"endOffset":3308},"description":"Unused variable: required.","severity":"WARNING"}]}
[warn] !  firestore.rules:80:15 - WARNING Unused variable: required. 
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2022-09-09T21:33:50.546Z] >>> [apiv2][query] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules [none]
[debug] [2022-09-09T21:33:50.548Z] >>> [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // match /{document=**} {\r\n    //   allow read, write: if true\r\n    //       // request.time < timestamp.date(2022, 2, 19);\r\n\r\n    // }\r\n\r\n    function numberValue(field){\r\n      return field is int || field is float\r\n    }\r\n\r\n    function optionalNumber(field){\r\n      return request.resource.data.get(field, 0) is int || \r\n        request.resource.data.get(field, 0.0) is float\r\n    }\r\n\r\n    match /users/{userId} {\r\n      allow read, create, update: if request.auth.uid == request.resource.data.uid \r\n    }\r\n\r\n    match /organizations/{orgId} {\r\n      function isOrgOwner(){\r\n         return resource.data.owner == request.auth.uid;\r\n      }\r\n\r\n      function verifyOrgData(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['owner', 'status', 'createdAt', 'modifiedAt', 'createdBy', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.keys().hasAll(allFields) &&\r\n          request.resource.data.keys().hasOnly(allFields) &&\r\n          request.resource.data.name is string &&\r\n          request.resource.data.businessTypeId is string &&\r\n          request.resource.data.businessType is map &&\r\n          request.resource.data.industry is string &&\r\n          request.resource.data.phone is string &&\r\n          request.resource.data.website is string &&\r\n          request.resource.data.country is string &&\r\n          request.resource.data.state is string &&\r\n          request.resource.data.city is string &&\r\n          request.resource.data.postalCode is string &&\r\n          request.resource.data.street is string &&\r\n          request.resource.data.owner is string &&\r\n          request.resource.data.status is string &&\r\n          request.resource.data.createdAt is timestamp &&\r\n          request.resource.data.modifiedAt is timestamp &&\r\n          request.resource.data.createdBy is string &&\r\n          request.resource.data.modifiedBy is string \r\n      }\r\n\r\n      function allowOrgUpdate(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['status', 'modifiedAt', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n      }\r\n\r\n      allow read: if isOrgOwner()\r\n      allow create: if request.auth != null && verifyOrgData()\r\n      allow update: if isOrgOwner() && verifyOrgData() && allowOrgUpdate()\r\n\r\n      function getOrgData(){\r\n        return get(/databases/$(database)/documents/organizations/$(orgId)).data\r\n      }\r\n\r\n      function isOwner(){\r\n        return request.auth.uid == getOrgData().owner\r\n      }\r\n\r\n      match /summaries/aggregate {\r\n        function verifyCountersData(){\r\n          let req1=[\"invoices\", \"deletedInvoices\", \"payments\",\"deletedPayments\", \"items\", \"customers\"];\r\n          let req2=['invoicesTotal', 'paymentsTotal', 'paymentModes', 'accounts'];\r\n          let required=req1.concat(req2);\r\n          \r\n          return request.resource.data.keys().hasAll(required) &&\r\n            numberValue(request.resource.data.invoices) &&\r\n            numberValue(request.resource.data.deletedInvoices) &&\r\n            numberValue(request.resource.data.payments) &&\r\n            numberValue(request.resource.data.deletedPayments) &&\r\n            numberValue(request.resource.data.items) &&\r\n            numberValue(request.resource.data.customers) &&\r\n            numberValue(request.resource.data.invoicesTotal) &&\r\n            numberValue(request.resource.data.paymentsTotal) &&\r\n            request.resource.data.paymentModes is map &&\r\n            request.resource.data.accounts is map\r\n        }\r\n\r\n\r\n        allow create: if request.auth != null && verifyCountersData()\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() && verifyCountersData()\r\n      }\r\n\r\n      match /orgDetails/{detailId} {\r\n        allow create: if request.auth != null\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() \r\n      }\r\n\r\n      match /accounts/{accountId} {\r\n        function verifyAccountData(){\r\n          let required=[\"accountType\", \"name\", \"amount\", \"description\", \"tags\"];\r\n          let additional=[\"status\", \"createdAt\", \"modifiedAt\", 'createdBy', 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.accountType is map &&\r\n            request.resource.data.accountType.id is string &&\r\n            request.resource.data.accountType.main is string &&\r\n            request.resource.data.accountType.name is string &&\r\n            request.resource.data.name is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.description is string &&\r\n            request.resource.data.tags is list\r\n        }\r\n\r\n        function allowAccountUpdate(){\r\n          let required=[\"name\", \"amount\", \"description\"];\r\n          let additional=[\"status\", \"modifiedAt\", 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if request.auth != null && verifyAccountData()\r\n        allow update: if isOwner() && verifyAccountData() && allowAccountUpdate()\r\n\r\n        match /transactions/{transactionId}{\r\n          allow read:if true\r\n        }\r\n      }\r\n      \r\n\r\n      match /items/{itemId} {\r\n        function getFixedValues(){\r\n          return ['createdBy', 'createdAt'];\r\n        }\r\n\r\n        function verifyItemData(){\r\n          let form1=['name', 'type', 'sku', 'skuOption', 'unit'];\r\n          let form2=['sellingPrice', 'salesAccount'];\r\n          let additional=['status', 'createdBy', 'createdAt', 'modifiedBy',  'modifiedAt'];\r\n          let optional=['variant', 'costPrice', 'salesTax', \"salesTaxType\", 'extraDetails'];\r\n          let required=form1.concat(form2).concat(additional);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.sku is string &&\r\n            request.resource.data.skuOption is string &&\r\n            request.resource.data.unit is string &&\r\n            numberValue(request.resource.data.sellingPrice) &&\r\n            request.resource.data.salesAccount is map &&\r\n            request.resource.data.get(\"variant\", '') is string &&\r\n            optionalNumber(\"costPrice\") &&\r\n            request.resource.data.get('salesTax', {}) is map &&\r\n            request.resource.data.get(\"salesTaxType\", \"\") is string &&\r\n            request.resource.data.get(\"extraDetails\", \"\") is string &&  \r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp        \r\n        }\r\n\r\n        function allowItemUpdate(){\r\n         let fixed=getFixedValues();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner();\r\n        allow create: if isOwner() && verifyItemData();\r\n        allow update: if isOwner() && verifyItemData() && allowItemUpdate()\r\n      }\r\n\r\n      match /taxes/{taxId} {\r\n        function verifyTaxData(){\r\n          let general=['name', 'rate', 'status', 'createdAt', 'createdBy', 'modifiedBy', 'modifiedAt'];\r\n          \r\n          return request.resource.data.keys().hasAll(general) &&\r\n            request.resource.data.keys().hasOnly(general) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.rate is int &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp\r\n        }\r\n\r\n        function allowTaxUpdate(){\r\n          let general=['name', 'rate', 'status', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(general)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyTaxData()\r\n        allow update: if isOwner() && verifyTaxData() && allowTaxUpdate()\r\n\r\n      }\r\n\r\n      match /journals/{entryId} {\r\n        function verifyJournalData(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"date\", \"status\", \"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(required) &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.amountState is string &&\r\n            request.resource.data.date is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountType is map &&\r\n            request.resource.data.account.name is string &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.debit) &&\r\n            numberValue(request.resource.data.credit) &&\r\n            request.resource.data.transactionId is string &&\r\n            request.resource.data.transactionDetails is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowJournalUpdate(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"status\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(required)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyJournalData()\r\n        allow update: if isOwner() && verifyJournalData() && allowJournalUpdate()\r\n        allow delete: if isOwner()\r\n      }\r\n\r\n      match /customers/{customerId} {\r\n        function customerFixed(){\r\n          return ['createdAt', 'createdBy'];\r\n        }\r\n        function verifyCustomerData(){\r\n          let details=['type','salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['openingBalance', 'paymentTerm', 'website', 'remarks'];\r\n          let fixed=customerFixed();\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'].concat(fixed);\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            numberValue(request.resource.data.openingBalance) &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.invoices is int &&\r\n            request.resource.data.summary.deletedInvoices is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.invoicedAmount) &&\r\n            numberValue(request.resource.data.summary.invoicePayments) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowCustomerUpdate(){\r\n          let fixed=customerFixed();\r\n          let allFields=[\"openingBalance\"].concat(fixed);\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt', \"summary\"];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyCustomerData()\r\n        allow update: if isOwner() && verifyCustomerData() &&\r\n          (allowCustomerUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      match /vendors/{vendorId} {\r\n        function verifyVendorData(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'createdAt', 'createdBy', 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.bills is int &&\r\n            request.resource.data.summary.deletedBills is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            request.resource.data.summary.expenses is int &&\r\n            request.resource.data.summary.deletedExpenses is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.totalBills) &&\r\n            numberValue(request.resource.data.summary.totalPayments) &&\r\n            numberValue(request.resource.data.summary.totalExpenses) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowVendorUpdate(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyVendorData()\r\n        allow update: if isOwner() && verifyVendorData() &&\r\n          (allowVendorUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      function validateSalesSummary(data){\r\n        return data.summary is map &&\r\n          numberValue(data.summary.shipping) &&\r\n          numberValue(data.summary.adjustment) &&\r\n          numberValue(data.summary.subTotal) &&\r\n          numberValue(data.summary.totalAmount) &&\r\n          numberValue(data.summary.totalTax) &&\r\n          data.get(\"summary.taxes\", []) is list\r\n      }\r\n\r\n      match /invoices/{invoiceId} {\r\n        function balanceIsValid(){\r\n           return numberValue(request.resource.data.balance) &&\r\n            request.resource.data.balance >= 0 && \r\n            request.resource.data.balance <= request.resource.data.summary.totalAmount\r\n        }\r\n\r\n        function invoiceFixed(){\r\n          return ['org', 'transactionType', 'createdAt', 'createdBy'];\r\n        }\r\n        \r\n        function verifyInvoiceData(){\r\n          let form=['customer', 'invoiceDate', \"paymentTerm\", 'dueDate', 'selectedItems'];\r\n          let formExtras=['summary', \"balance\", 'paymentsReceived','paymentsIds','paymentsCount'];\r\n          let optional=['orderNumber', 'subject', 'customerNotes'];\r\n          let meta=['status', \"isSent\", 'modifiedAt', 'modifiedBy'];\r\n          let fixed=invoiceFixed();\r\n          let required=form.concat(formExtras).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.selectedItems is list &&\r\n            request.resource.data.paymentsReceived is map &&\r\n            request.resource.data.paymentsIds is list &&\r\n            request.resource.data.paymentsCount is int &&\r\n            request.resource.data.summary is map &&\r\n            optionalNumber(\"summary.shipping\") &&\r\n            optionalNumber(\"summary.adjustment\") &&\r\n            optionalNumber(\"summary.subTotal\") &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            optionalNumber(\"summary.totalTax\") &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.paymentTerm.value is string &&\r\n            request.resource.data.invoiceDate is timestamp &&\r\n            request.resource.data.dueDate is timestamp &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.get(\"customerNotes\", \"\")  is string &&\r\n            request.resource.data.get(\"orderNumber\", \"\") is string &&\r\n            request.resource.data.get(\"subject\", \"\") is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.transactionType is string &&\r\n            balanceIsValid()\r\n        }\r\n\r\n        \r\n\r\n        function allowInvoiceUpdate(){\r\n          let fixedFields=invoiceFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixedFields)\r\n        }\r\n\r\n        function invoiceIsPaid(){\r\n          return request.resource.data.paymentsCount > 0 ||\r\n            request.resource.data.balance < request.resource.data.summary.totalAmount\r\n        }\r\n        function allowCustomerChange(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.customer.customerId != resource.data.customer.customerId\r\n        }\r\n        function allowDelete(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.status == \"deleted\"\r\n        }\r\n        function allowNormalUpdate(){\r\n          return request.resource.data.status != \"deleted\" &&\r\n            request.resource.data.customer.customerId == resource.data.customer.customerId\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyInvoiceData()\r\n        allow update: if isOwner() && verifyInvoiceData() && allowInvoiceUpdate() &&\r\n          (allowNormalUpdate() || allowCustomerChange() || allowDelete())\r\n        allow delete: if isOwner() &&\r\n          resource.data.transactionType == \"customer_opening_balance\"\r\n      }\r\n\r\n     \r\n      match /payments/{paymentId} {\r\n        function paymentsFixed(){\r\n          return ['org', 'createdBy', \"createdAt\"];\r\n        }\r\n\r\n        function verifyPaymentData(){\r\n          let form=['account', 'amount', 'customer', 'paymentDate', \"paymentMode\"];\r\n          let details=[\"payments\", \"paidInvoicesIds\", 'excess'];\r\n          let meta=['status', 'modifiedBy', \"modifiedAt\", \"transactionType\"];\r\n          let optional=['reference'];\r\n          let fixed=paymentsFixed();\r\n          let required=form.concat(details).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            numberValue(request.resource.data.excess) &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentDate is timestamp &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.paymentMode.value is string &&\r\n            request.resource.data.payments is map &&\r\n            request.resource.data.paidInvoicesIds is list &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.get(\"reference\", \"\") is string\r\n            // numberValue(request.resource.data.bankCharges) &&\r\n            // request.resource.data.taxDeducted is string &&\r\n            // request.resource.data.tdsTaxAccount is string \r\n\r\n        }\r\n\r\n        function allowPaymentUpdate(){\r\n          let fixed=paymentsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyPaymentData()\r\n        allow update: if isOwner() && verifyPaymentData() && allowPaymentUpdate()\r\n      }\r\n\r\n      match /salesReceipts/{receiptId} {\r\n        function salesReceiptsFixed(){\r\n          return ['createdAt', 'createdBy', 'org', 'transactionType'];\r\n        }\r\n        function verifySalesReceiptData(){\r\n          let form=[\"receiptDate\", \"account\", 'paymentMode', \"reference\", 'customerNotes'];\r\n          let optional=[\"customer\"];\r\n          let sale=['selectedItems', 'summary'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'isSent', 'status'];\r\n          let fixed=salesReceiptsFixed();\r\n          let required=form.concat(sale).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.get(\"customer\", {}) is map &&\r\n            request.resource.data.receiptDate is timestamp &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.customerNotes is string &&\r\n            request.resource.data.selectedItems is list &&\r\n            validateSalesSummary(request.resource.data) &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.status is string\r\n        }\r\n\r\n        function allowSalesReceiptUpdate(){\r\n          let fixed=salesReceiptsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifySalesReceiptData()\r\n        allow update: if isOwner() && verifySalesReceiptData() &&\r\n          allowSalesReceiptUpdate()\r\n      }\r\n\r\n      match /expenses/{expenseId} {\r\n        function expenseFixed(){\r\n          return ['createdAt', 'createdBy', 'org'];\r\n        }\r\n        function verifyExpenseData(){\r\n          let form=[\"expenseDate\", \"paymentAccount\", 'paymentMode', \"reference\"];\r\n          let optional=['vendor'];\r\n          let expense=['items', 'summary', 'transactionType', 'taxType'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'status'];\r\n          let fixed=expenseFixed();\r\n          let required=form.concat(expense).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.expenseDate is timestamp &&\r\n            request.resource.data.paymentAccount is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.get('vendor', {}) is map &&\r\n            request.resource.data.items is list &&\r\n            request.resource.data.summary is map &&\r\n            numberValue(request.resource.data.summary.subTotal) &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            numberValue(request.resource.data.summary.totalTax) &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.taxType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map \r\n        }\r\n\r\n        function allowExpenseUpdate(){\r\n          let fixed=expenseFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyExpenseData()\r\n        allow update: if isOwner() && verifyExpenseData() &&\r\n          allowExpenseUpdate()\r\n      }\r\n    }\r\n  }\r\n}"}]}}
[debug] [2022-09-09T21:33:51.375Z] <<< [apiv2][status] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules 200
[debug] [2022-09-09T21:33:51.375Z] <<< [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2022-09-09T21:34:08.415Z] >>> [apiv2][query] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules [none]
[debug] [2022-09-09T21:34:08.415Z] >>> [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // match /{document=**} {\r\n    //   allow read, write: if true\r\n    //       // request.time < timestamp.date(2022, 2, 19);\r\n\r\n    // }\r\n\r\n    function numberValue(field){\r\n      return field is int || field is float\r\n    }\r\n\r\n    function optionalNumber(field){\r\n      return request.resource.data.get(field, 0) is int || \r\n        request.resource.data.get(field, 0.0) is float\r\n    }\r\n\r\n    match /users/{userId} {\r\n      allow read, create, update: if request.auth.uid == request.resource.data.uid \r\n    }\r\n\r\n    match /organizations/{orgId} {\r\n      function isOrgOwner(){\r\n         return resource.data.owner == request.auth.uid;\r\n      }\r\n\r\n      function verifyOrgData(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['owner', 'status', 'createdAt', 'modifiedAt', 'createdBy', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.keys().hasAll(allFields) &&\r\n          request.resource.data.keys().hasOnly(allFields) &&\r\n          request.resource.data.name is string &&\r\n          request.resource.data.businessTypeId is string &&\r\n          request.resource.data.businessType is map &&\r\n          request.resource.data.industry is string &&\r\n          request.resource.data.phone is string &&\r\n          request.resource.data.website is string &&\r\n          request.resource.data.country is string &&\r\n          request.resource.data.state is string &&\r\n          request.resource.data.city is string &&\r\n          request.resource.data.postalCode is string &&\r\n          request.resource.data.street is string &&\r\n          request.resource.data.owner is string &&\r\n          request.resource.data.status is string &&\r\n          request.resource.data.createdAt is timestamp &&\r\n          request.resource.data.modifiedAt is timestamp &&\r\n          request.resource.data.createdBy is string &&\r\n          request.resource.data.modifiedBy is string \r\n      }\r\n\r\n      function allowOrgUpdate(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['status', 'modifiedAt', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n      }\r\n\r\n      allow read: if isOrgOwner()\r\n      allow create: if request.auth != null && verifyOrgData()\r\n      allow update: if isOrgOwner() && verifyOrgData() && allowOrgUpdate()\r\n\r\n      function getOrgData(){\r\n        return get(/databases/$(database)/documents/organizations/$(orgId)).data\r\n      }\r\n\r\n      function isOwner(){\r\n        return request.auth.uid == getOrgData().owner\r\n      }\r\n\r\n      match /summaries/aggregate {\r\n        function verifyCountersData(){\r\n          let req1=[\"invoices\", \"deletedInvoices\", \"payments\",\"deletedPayments\", \"items\", \"customers\"];\r\n          let req2=['invoicesTotal', 'paymentsTotal', 'paymentModes', 'accounts'];\r\n          let required=req1.concat(req2);\r\n          \r\n          return request.resource.data.keys().hasAll(required) &&\r\n            numberValue(request.resource.data.invoices) &&\r\n            numberValue(request.resource.data.deletedInvoices) &&\r\n            numberValue(request.resource.data.payments) &&\r\n            numberValue(request.resource.data.deletedPayments) &&\r\n            numberValue(request.resource.data.items) &&\r\n            numberValue(request.resource.data.customers) &&\r\n            numberValue(request.resource.data.invoicesTotal) &&\r\n            numberValue(request.resource.data.paymentsTotal) &&\r\n            request.resource.data.paymentModes is map &&\r\n            request.resource.data.accounts is map\r\n        }\r\n\r\n\r\n        allow create: if request.auth != null && verifyCountersData()\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() && verifyCountersData()\r\n      }\r\n\r\n      match /orgDetails/{detailId} {\r\n        allow create: if request.auth != null\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() \r\n      }\r\n\r\n      match /accounts/{accountId} {\r\n        function verifyAccountData(){\r\n          let required=[\"accountType\", \"name\", \"amount\", \"description\", \"tags\"];\r\n          let additional=[\"status\", \"createdAt\", \"modifiedAt\", 'createdBy', 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.accountType is map &&\r\n            request.resource.data.accountType.id is string &&\r\n            request.resource.data.accountType.main is string &&\r\n            request.resource.data.accountType.name is string &&\r\n            request.resource.data.name is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.description is string &&\r\n            request.resource.data.tags is list\r\n        }\r\n\r\n        function allowAccountUpdate(){\r\n          let required=[\"name\", \"amount\", \"description\"];\r\n          let additional=[\"status\", \"modifiedAt\", 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if request.auth != null && verifyAccountData()\r\n        allow update: if isOwner() && verifyAccountData() && allowAccountUpdate()\r\n\r\n        match /transactions/{transactionId}{\r\n          allow read:if true\r\n        }\r\n      }\r\n      \r\n\r\n      match /items/{itemId} {\r\n        function getFixedValues(){\r\n          return ['createdBy', 'createdAt'];\r\n        }\r\n\r\n        function verifyItemData(){\r\n          let form1=['name', 'type', 'sku', 'skuOption', 'unit'];\r\n          let form2=['sellingPrice', 'salesAccount'];\r\n          let additional=['status', 'createdBy', 'createdAt', 'modifiedBy',  'modifiedAt'];\r\n          let optional=['variant', 'costPrice', 'salesTax', \"salesTaxType\", 'extraDetails'];\r\n          let required=form1.concat(form2).concat(additional);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.sku is string &&\r\n            request.resource.data.skuOption is string &&\r\n            request.resource.data.unit is string &&\r\n            numberValue(request.resource.data.sellingPrice) &&\r\n            request.resource.data.salesAccount is map &&\r\n            request.resource.data.get(\"variant\", '') is string &&\r\n            optionalNumber(\"costPrice\") &&\r\n            request.resource.data.get('salesTax', {}) is map &&\r\n            request.resource.data.get(\"salesTaxType\", \"\") is string &&\r\n            request.resource.data.get(\"extraDetails\", \"\") is string &&  \r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp        \r\n        }\r\n\r\n        function allowItemUpdate(){\r\n         let fixed=getFixedValues();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner();\r\n        allow create: if isOwner() && verifyItemData();\r\n        allow update: if isOwner() && verifyItemData() && allowItemUpdate()\r\n      }\r\n\r\n      match /taxes/{taxId} {\r\n        function verifyTaxData(){\r\n          let general=['name', 'rate', 'status', 'createdAt', 'createdBy', 'modifiedBy', 'modifiedAt'];\r\n          \r\n          return request.resource.data.keys().hasAll(general) &&\r\n            request.resource.data.keys().hasOnly(general) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.rate is int &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp\r\n        }\r\n\r\n        function allowTaxUpdate(){\r\n          let general=['name', 'rate', 'status', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(general)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyTaxData()\r\n        allow update: if isOwner() && verifyTaxData() && allowTaxUpdate()\r\n\r\n      }\r\n\r\n      match /journals/{entryId} {\r\n        function verifyJournalData(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"date\", \"status\", \"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(required) &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.amountState is string &&\r\n            request.resource.data.date is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountType is map &&\r\n            request.resource.data.account.name is string &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.debit) &&\r\n            numberValue(request.resource.data.credit) &&\r\n            request.resource.data.transactionId is string &&\r\n            request.resource.data.transactionDetails is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowJournalUpdate(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"status\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(required)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyJournalData()\r\n        allow update: if isOwner() && verifyJournalData() && allowJournalUpdate()\r\n        allow delete: if isOwner()\r\n      }\r\n\r\n      match /customers/{customerId} {\r\n        function customerFixed(){\r\n          return ['createdAt', 'createdBy'];\r\n        }\r\n        function verifyCustomerData(){\r\n          let details=['type','salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['openingBalance', 'paymentTerm', 'website', 'remarks'];\r\n          let fixed=customerFixed();\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'].concat(fixed);\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            numberValue(request.resource.data.openingBalance) &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.invoices is int &&\r\n            request.resource.data.summary.deletedInvoices is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.invoicedAmount) &&\r\n            numberValue(request.resource.data.summary.invoicePayments) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowCustomerUpdate(){\r\n          let fixed=customerFixed();\r\n          let allFields=[\"openingBalance\"].concat(fixed);\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt', \"summary\"];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyCustomerData()\r\n        allow update: if isOwner() && verifyCustomerData() &&\r\n          (allowCustomerUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      match /vendors/{vendorId} {\r\n        function verifyVendorData(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'createdAt', 'createdBy', 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.bills is int &&\r\n            request.resource.data.summary.deletedBills is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            request.resource.data.summary.expenses is int &&\r\n            request.resource.data.summary.deletedExpenses is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.totalBills) &&\r\n            numberValue(request.resource.data.summary.totalPayments) &&\r\n            numberValue(request.resource.data.summary.totalExpenses) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowVendorUpdate(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyVendorData()\r\n        allow update: if isOwner() && verifyVendorData() &&\r\n          (allowVendorUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      function validateSalesSummary(data){\r\n        return data.summary is map &&\r\n          numberValue(data.summary.shipping) &&\r\n          numberValue(data.summary.adjustment) &&\r\n          numberValue(data.summary.subTotal) &&\r\n          numberValue(data.summary.totalAmount) &&\r\n          numberValue(data.summary.totalTax) &&\r\n          data.get(\"summary.taxes\", []) is list\r\n      }\r\n\r\n      match /invoices/{invoiceId} {\r\n        function balanceIsValid(){\r\n           return numberValue(request.resource.data.balance) &&\r\n            request.resource.data.balance >= 0 && \r\n            request.resource.data.balance <= request.resource.data.summary.totalAmount\r\n        }\r\n\r\n        function invoiceFixed(){\r\n          return ['org', 'transactionType', 'createdAt', 'createdBy'];\r\n        }\r\n        \r\n        function verifyInvoiceData(){\r\n          let form=['customer', 'invoiceDate', \"paymentTerm\", 'dueDate', 'selectedItems'];\r\n          let formExtras=['summary', \"balance\", 'paymentsReceived','paymentsIds','paymentsCount'];\r\n          let optional=['orderNumber', 'subject', 'customerNotes'];\r\n          let meta=['status', \"isSent\", 'modifiedAt', 'modifiedBy'];\r\n          let fixed=invoiceFixed();\r\n          let required=form.concat(formExtras).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.selectedItems is list &&\r\n            request.resource.data.paymentsReceived is map &&\r\n            request.resource.data.paymentsIds is list &&\r\n            request.resource.data.paymentsCount is int &&\r\n            request.resource.data.summary is map &&\r\n            optionalNumber(\"summary.shipping\") &&\r\n            optionalNumber(\"summary.adjustment\") &&\r\n            optionalNumber(\"summary.subTotal\") &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            optionalNumber(\"summary.totalTax\") &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.paymentTerm.value is string &&\r\n            request.resource.data.invoiceDate is timestamp &&\r\n            request.resource.data.dueDate is timestamp &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.get(\"customerNotes\", \"\")  is string &&\r\n            request.resource.data.get(\"orderNumber\", \"\") is string &&\r\n            request.resource.data.get(\"subject\", \"\") is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.transactionType is string &&\r\n            balanceIsValid()\r\n        }\r\n\r\n        \r\n\r\n        function allowInvoiceUpdate(){\r\n          let fixedFields=invoiceFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixedFields)\r\n        }\r\n\r\n        function invoiceIsPaid(){\r\n          return request.resource.data.paymentsCount > 0 ||\r\n            request.resource.data.balance < request.resource.data.summary.totalAmount\r\n        }\r\n        function allowCustomerChange(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.customer.customerId != resource.data.customer.customerId\r\n        }\r\n        function allowDelete(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.status == \"deleted\"\r\n        }\r\n        function allowNormalUpdate(){\r\n          return request.resource.data.status != \"deleted\" &&\r\n            request.resource.data.customer.customerId == resource.data.customer.customerId\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyInvoiceData()\r\n        allow update: if isOwner() && verifyInvoiceData() && allowInvoiceUpdate() &&\r\n          (allowNormalUpdate() || allowCustomerChange() || allowDelete())\r\n        allow delete: if isOwner() &&\r\n          resource.data.transactionType == \"customer_opening_balance\"\r\n      }\r\n\r\n     \r\n      match /payments/{paymentId} {\r\n        function paymentsFixed(){\r\n          return ['org', 'createdBy', \"createdAt\"];\r\n        }\r\n\r\n        function verifyPaymentData(){\r\n          let form=['account', 'amount', 'customer', 'paymentDate', \"paymentMode\"];\r\n          let details=[\"payments\", \"paidInvoicesIds\", 'excess'];\r\n          let meta=['status', 'modifiedBy', \"modifiedAt\", \"transactionType\"];\r\n          let optional=['reference'];\r\n          let fixed=paymentsFixed();\r\n          let required=form.concat(details).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            numberValue(request.resource.data.excess) &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentDate is timestamp &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.paymentMode.value is string &&\r\n            request.resource.data.payments is map &&\r\n            request.resource.data.paidInvoicesIds is list &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.get(\"reference\", \"\") is string\r\n            // numberValue(request.resource.data.bankCharges) &&\r\n            // request.resource.data.taxDeducted is string &&\r\n            // request.resource.data.tdsTaxAccount is string \r\n\r\n        }\r\n\r\n        function allowPaymentUpdate(){\r\n          let fixed=paymentsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyPaymentData()\r\n        allow update: if isOwner() && verifyPaymentData() && allowPaymentUpdate()\r\n      }\r\n\r\n      match /salesReceipts/{receiptId} {\r\n        function salesReceiptsFixed(){\r\n          return ['createdAt', 'createdBy', 'org', 'transactionType'];\r\n        }\r\n        function verifySalesReceiptData(){\r\n          let form=[\"receiptDate\", \"account\", 'paymentMode', \"reference\", 'customerNotes'];\r\n          let optional=[\"customer\"];\r\n          let sale=['selectedItems', 'summary'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'isSent', 'status'];\r\n          let fixed=salesReceiptsFixed();\r\n          let required=form.concat(sale).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.get(\"customer\", {}) is map &&\r\n            request.resource.data.receiptDate is timestamp &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.customerNotes is string &&\r\n            request.resource.data.selectedItems is list &&\r\n            validateSalesSummary(request.resource.data) &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.status is string\r\n        }\r\n\r\n        function allowSalesReceiptUpdate(){\r\n          let fixed=salesReceiptsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifySalesReceiptData()\r\n        allow update: if isOwner() && verifySalesReceiptData() &&\r\n          allowSalesReceiptUpdate()\r\n      }\r\n\r\n      match /expenses/{expenseId} {\r\n        function expenseFixed(){\r\n          return ['createdAt', 'createdBy', 'org'];\r\n        }\r\n        function verifyExpenseData(){\r\n          let form=[\"expenseDate\", \"paymentAccount\", 'paymentMode', \"reference\"];\r\n          let optional=['vendor'];\r\n          let expense=['items', 'summary', 'transactionType', 'taxType'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'status'];\r\n          let fixed=expenseFixed();\r\n          let required=form.concat(expense).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.expenseDate is timestamp &&\r\n            request.resource.data.paymentAccount is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.get('vendor', {}) is map &&\r\n            request.resource.data.items is list &&\r\n            request.resource.data.summary is map &&\r\n            numberValue(request.resource.data.summary.subTotal) &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            numberValue(request.resource.data.summary.totalTax) &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.taxType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map \r\n        }\r\n\r\n        function allowExpenseUpdate(){\r\n          let fixed=expenseFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyExpenseData()\r\n        allow update: if isOwner() && verifyExpenseData() &&\r\n          allowExpenseUpdate()\r\n      }\r\n    }\r\n  }\r\n}"}]}}
[debug] [2022-09-09T21:34:08.968Z] <<< [apiv2][status] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules 200
[debug] [2022-09-09T21:34:08.968Z] <<< [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2022-09-09T21:35:08.047Z] >>> [apiv2][query] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules [none]
[debug] [2022-09-09T21:35:08.048Z] >>> [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // match /{document=**} {\r\n    //   allow read, write: if true\r\n    //       // request.time < timestamp.date(2022, 2, 19);\r\n\r\n    // }\r\n\r\n    function numberValue(field){\r\n      return field is int || field is float\r\n    }\r\n\r\n    function optionalNumber(field){\r\n      return request.resource.data.get(field, 0) is int || \r\n        request.resource.data.get(field, 0.0) is float\r\n    }\r\n\r\n    match /users/{userId} {\r\n      allow read, create, update: if request.auth.uid == request.resource.data.uid \r\n    }\r\n\r\n    match /organizations/{orgId} {\r\n      function isOrgOwner(){\r\n         return resource.data.owner == request.auth.uid;\r\n      }\r\n\r\n      function verifyOrgData(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['owner', 'status', 'createdAt', 'modifiedAt', 'createdBy', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.keys().hasAll(allFields) &&\r\n          request.resource.data.keys().hasOnly(allFields) &&\r\n          request.resource.data.name is string &&\r\n          request.resource.data.businessTypeId is string &&\r\n          request.resource.data.businessType is map &&\r\n          request.resource.data.industry is string &&\r\n          request.resource.data.phone is string &&\r\n          request.resource.data.website is string &&\r\n          request.resource.data.country is string &&\r\n          request.resource.data.state is string &&\r\n          request.resource.data.city is string &&\r\n          request.resource.data.postalCode is string &&\r\n          request.resource.data.street is string &&\r\n          request.resource.data.owner is string &&\r\n          request.resource.data.status is string &&\r\n          request.resource.data.createdAt is timestamp &&\r\n          request.resource.data.modifiedAt is timestamp &&\r\n          request.resource.data.createdBy is string &&\r\n          request.resource.data.modifiedBy is string \r\n      }\r\n\r\n      function allowOrgUpdate(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['status', 'modifiedAt', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n      }\r\n\r\n      allow read: if isOrgOwner()\r\n      allow create: if request.auth != null && verifyOrgData()\r\n      allow update: if isOrgOwner() && verifyOrgData() && allowOrgUpdate()\r\n\r\n      function getOrgData(){\r\n        return get(/databases/$(database)/documents/organizations/$(orgId)).data\r\n      }\r\n\r\n      function isOwner(){\r\n        return request.auth.uid == getOrgData().owner\r\n      }\r\n\r\n      match /summaries/aggregate {\r\n        function verifyCountersData(){\r\n          let req1=[\"invoices\", \"deletedInvoices\", \"payments\",\"deletedPayments\", \"items\", \"customers\"];\r\n          let req2=['invoicesTotal', 'paymentsTotal', 'paymentModes', 'accounts'];\r\n          let required=req1.concat(req2);\r\n          \r\n          return request.resource.data.keys().hasAll(required) &&\r\n            numberValue(request.resource.data.invoices) &&\r\n            numberValue(request.resource.data.deletedInvoices) &&\r\n            numberValue(request.resource.data.payments) &&\r\n            numberValue(request.resource.data.deletedPayments) &&\r\n            numberValue(request.resource.data.items) &&\r\n            numberValue(request.resource.data.customers) &&\r\n            numberValue(request.resource.data.invoicesTotal) &&\r\n            numberValue(request.resource.data.paymentsTotal) &&\r\n            request.resource.data.paymentModes is map &&\r\n            request.resource.data.accounts is map\r\n        }\r\n\r\n\r\n        allow create: if request.auth != null \r\n        // && verifyCountersData()\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() && verifyCountersData()\r\n      }\r\n\r\n      match /orgDetails/{detailId} {\r\n        allow create: if request.auth != null\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() \r\n      }\r\n\r\n      match /accounts/{accountId} {\r\n        function verifyAccountData(){\r\n          let required=[\"accountType\", \"name\", \"amount\", \"description\", \"tags\"];\r\n          let additional=[\"status\", \"createdAt\", \"modifiedAt\", 'createdBy', 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.accountType is map &&\r\n            request.resource.data.accountType.id is string &&\r\n            request.resource.data.accountType.main is string &&\r\n            request.resource.data.accountType.name is string &&\r\n            request.resource.data.name is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.description is string &&\r\n            request.resource.data.tags is list\r\n        }\r\n\r\n        function allowAccountUpdate(){\r\n          let required=[\"name\", \"amount\", \"description\"];\r\n          let additional=[\"status\", \"modifiedAt\", 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if request.auth != null && verifyAccountData()\r\n        allow update: if isOwner() && verifyAccountData() && allowAccountUpdate()\r\n\r\n        match /transactions/{transactionId}{\r\n          allow read:if true\r\n        }\r\n      }\r\n      \r\n\r\n      match /items/{itemId} {\r\n        function getFixedValues(){\r\n          return ['createdBy', 'createdAt'];\r\n        }\r\n\r\n        function verifyItemData(){\r\n          let form1=['name', 'type', 'sku', 'skuOption', 'unit'];\r\n          let form2=['sellingPrice', 'salesAccount'];\r\n          let additional=['status', 'createdBy', 'createdAt', 'modifiedBy',  'modifiedAt'];\r\n          let optional=['variant', 'costPrice', 'salesTax', \"salesTaxType\", 'extraDetails'];\r\n          let required=form1.concat(form2).concat(additional);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.sku is string &&\r\n            request.resource.data.skuOption is string &&\r\n            request.resource.data.unit is string &&\r\n            numberValue(request.resource.data.sellingPrice) &&\r\n            request.resource.data.salesAccount is map &&\r\n            request.resource.data.get(\"variant\", '') is string &&\r\n            optionalNumber(\"costPrice\") &&\r\n            request.resource.data.get('salesTax', {}) is map &&\r\n            request.resource.data.get(\"salesTaxType\", \"\") is string &&\r\n            request.resource.data.get(\"extraDetails\", \"\") is string &&  \r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp        \r\n        }\r\n\r\n        function allowItemUpdate(){\r\n         let fixed=getFixedValues();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner();\r\n        allow create: if isOwner() && verifyItemData();\r\n        allow update: if isOwner() && verifyItemData() && allowItemUpdate()\r\n      }\r\n\r\n      match /taxes/{taxId} {\r\n        function verifyTaxData(){\r\n          let general=['name', 'rate', 'status', 'createdAt', 'createdBy', 'modifiedBy', 'modifiedAt'];\r\n          \r\n          return request.resource.data.keys().hasAll(general) &&\r\n            request.resource.data.keys().hasOnly(general) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.rate is int &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp\r\n        }\r\n\r\n        function allowTaxUpdate(){\r\n          let general=['name', 'rate', 'status', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(general)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyTaxData()\r\n        allow update: if isOwner() && verifyTaxData() && allowTaxUpdate()\r\n\r\n      }\r\n\r\n      match /journals/{entryId} {\r\n        function verifyJournalData(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"date\", \"status\", \"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(required) &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.amountState is string &&\r\n            request.resource.data.date is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountType is map &&\r\n            request.resource.data.account.name is string &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.debit) &&\r\n            numberValue(request.resource.data.credit) &&\r\n            request.resource.data.transactionId is string &&\r\n            request.resource.data.transactionDetails is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowJournalUpdate(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"status\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(required)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyJournalData()\r\n        allow update: if isOwner() && verifyJournalData() && allowJournalUpdate()\r\n        allow delete: if isOwner()\r\n      }\r\n\r\n      match /customers/{customerId} {\r\n        function customerFixed(){\r\n          return ['createdAt', 'createdBy'];\r\n        }\r\n        function verifyCustomerData(){\r\n          let details=['type','salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['openingBalance', 'paymentTerm', 'website', 'remarks'];\r\n          let fixed=customerFixed();\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'].concat(fixed);\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            numberValue(request.resource.data.openingBalance) &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.invoices is int &&\r\n            request.resource.data.summary.deletedInvoices is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.invoicedAmount) &&\r\n            numberValue(request.resource.data.summary.invoicePayments) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowCustomerUpdate(){\r\n          let fixed=customerFixed();\r\n          let allFields=[\"openingBalance\"].concat(fixed);\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt', \"summary\"];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyCustomerData()\r\n        allow update: if isOwner() && verifyCustomerData() &&\r\n          (allowCustomerUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      match /vendors/{vendorId} {\r\n        function verifyVendorData(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'createdAt', 'createdBy', 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.bills is int &&\r\n            request.resource.data.summary.deletedBills is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            request.resource.data.summary.expenses is int &&\r\n            request.resource.data.summary.deletedExpenses is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.totalBills) &&\r\n            numberValue(request.resource.data.summary.totalPayments) &&\r\n            numberValue(request.resource.data.summary.totalExpenses) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowVendorUpdate(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyVendorData()\r\n        allow update: if isOwner() && verifyVendorData() &&\r\n          (allowVendorUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      function validateSalesSummary(data){\r\n        return data.summary is map &&\r\n          numberValue(data.summary.shipping) &&\r\n          numberValue(data.summary.adjustment) &&\r\n          numberValue(data.summary.subTotal) &&\r\n          numberValue(data.summary.totalAmount) &&\r\n          numberValue(data.summary.totalTax) &&\r\n          data.get(\"summary.taxes\", []) is list\r\n      }\r\n\r\n      match /invoices/{invoiceId} {\r\n        function balanceIsValid(){\r\n           return numberValue(request.resource.data.balance) &&\r\n            request.resource.data.balance >= 0 && \r\n            request.resource.data.balance <= request.resource.data.summary.totalAmount\r\n        }\r\n\r\n        function invoiceFixed(){\r\n          return ['org', 'transactionType', 'createdAt', 'createdBy'];\r\n        }\r\n        \r\n        function verifyInvoiceData(){\r\n          let form=['customer', 'invoiceDate', \"paymentTerm\", 'dueDate', 'selectedItems'];\r\n          let formExtras=['summary', \"balance\", 'paymentsReceived','paymentsIds','paymentsCount'];\r\n          let optional=['orderNumber', 'subject', 'customerNotes'];\r\n          let meta=['status', \"isSent\", 'modifiedAt', 'modifiedBy'];\r\n          let fixed=invoiceFixed();\r\n          let required=form.concat(formExtras).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.selectedItems is list &&\r\n            request.resource.data.paymentsReceived is map &&\r\n            request.resource.data.paymentsIds is list &&\r\n            request.resource.data.paymentsCount is int &&\r\n            request.resource.data.summary is map &&\r\n            optionalNumber(\"summary.shipping\") &&\r\n            optionalNumber(\"summary.adjustment\") &&\r\n            optionalNumber(\"summary.subTotal\") &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            optionalNumber(\"summary.totalTax\") &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.paymentTerm.value is string &&\r\n            request.resource.data.invoiceDate is timestamp &&\r\n            request.resource.data.dueDate is timestamp &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.get(\"customerNotes\", \"\")  is string &&\r\n            request.resource.data.get(\"orderNumber\", \"\") is string &&\r\n            request.resource.data.get(\"subject\", \"\") is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.transactionType is string &&\r\n            balanceIsValid()\r\n        }\r\n\r\n        \r\n\r\n        function allowInvoiceUpdate(){\r\n          let fixedFields=invoiceFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixedFields)\r\n        }\r\n\r\n        function invoiceIsPaid(){\r\n          return request.resource.data.paymentsCount > 0 ||\r\n            request.resource.data.balance < request.resource.data.summary.totalAmount\r\n        }\r\n        function allowCustomerChange(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.customer.customerId != resource.data.customer.customerId\r\n        }\r\n        function allowDelete(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.status == \"deleted\"\r\n        }\r\n        function allowNormalUpdate(){\r\n          return request.resource.data.status != \"deleted\" &&\r\n            request.resource.data.customer.customerId == resource.data.customer.customerId\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyInvoiceData()\r\n        allow update: if isOwner() && verifyInvoiceData() && allowInvoiceUpdate() &&\r\n          (allowNormalUpdate() || allowCustomerChange() || allowDelete())\r\n        allow delete: if isOwner() &&\r\n          resource.data.transactionType == \"customer_opening_balance\"\r\n      }\r\n\r\n     \r\n      match /payments/{paymentId} {\r\n        function paymentsFixed(){\r\n          return ['org', 'createdBy', \"createdAt\"];\r\n        }\r\n\r\n        function verifyPaymentData(){\r\n          let form=['account', 'amount', 'customer', 'paymentDate', \"paymentMode\"];\r\n          let details=[\"payments\", \"paidInvoicesIds\", 'excess'];\r\n          let meta=['status', 'modifiedBy', \"modifiedAt\", \"transactionType\"];\r\n          let optional=['reference'];\r\n          let fixed=paymentsFixed();\r\n          let required=form.concat(details).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            numberValue(request.resource.data.excess) &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentDate is timestamp &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.paymentMode.value is string &&\r\n            request.resource.data.payments is map &&\r\n            request.resource.data.paidInvoicesIds is list &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.get(\"reference\", \"\") is string\r\n            // numberValue(request.resource.data.bankCharges) &&\r\n            // request.resource.data.taxDeducted is string &&\r\n            // request.resource.data.tdsTaxAccount is string \r\n\r\n        }\r\n\r\n        function allowPaymentUpdate(){\r\n          let fixed=paymentsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyPaymentData()\r\n        allow update: if isOwner() && verifyPaymentData() && allowPaymentUpdate()\r\n      }\r\n\r\n      match /salesReceipts/{receiptId} {\r\n        function salesReceiptsFixed(){\r\n          return ['createdAt', 'createdBy', 'org', 'transactionType'];\r\n        }\r\n        function verifySalesReceiptData(){\r\n          let form=[\"receiptDate\", \"account\", 'paymentMode', \"reference\", 'customerNotes'];\r\n          let optional=[\"customer\"];\r\n          let sale=['selectedItems', 'summary'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'isSent', 'status'];\r\n          let fixed=salesReceiptsFixed();\r\n          let required=form.concat(sale).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.get(\"customer\", {}) is map &&\r\n            request.resource.data.receiptDate is timestamp &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.customerNotes is string &&\r\n            request.resource.data.selectedItems is list &&\r\n            validateSalesSummary(request.resource.data) &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.status is string\r\n        }\r\n\r\n        function allowSalesReceiptUpdate(){\r\n          let fixed=salesReceiptsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifySalesReceiptData()\r\n        allow update: if isOwner() && verifySalesReceiptData() &&\r\n          allowSalesReceiptUpdate()\r\n      }\r\n\r\n      match /expenses/{expenseId} {\r\n        function expenseFixed(){\r\n          return ['createdAt', 'createdBy', 'org'];\r\n        }\r\n        function verifyExpenseData(){\r\n          let form=[\"expenseDate\", \"paymentAccount\", 'paymentMode', \"reference\"];\r\n          let optional=['vendor'];\r\n          let expense=['items', 'summary', 'transactionType', 'taxType'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'status'];\r\n          let fixed=expenseFixed();\r\n          let required=form.concat(expense).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.expenseDate is timestamp &&\r\n            request.resource.data.paymentAccount is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.get('vendor', {}) is map &&\r\n            request.resource.data.items is list &&\r\n            request.resource.data.summary is map &&\r\n            numberValue(request.resource.data.summary.subTotal) &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            numberValue(request.resource.data.summary.totalTax) &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.taxType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map \r\n        }\r\n\r\n        function allowExpenseUpdate(){\r\n          let fixed=expenseFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyExpenseData()\r\n        allow update: if isOwner() && verifyExpenseData() &&\r\n          allowExpenseUpdate()\r\n      }\r\n    }\r\n  }\r\n}"}]}}
[debug] [2022-09-09T21:35:08.552Z] <<< [apiv2][status] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules 200
[debug] [2022-09-09T21:35:08.552Z] <<< [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2022-09-09T21:35:51.181Z] >>> [apiv2][query] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules [none]
[debug] [2022-09-09T21:35:51.182Z] >>> [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // match /{document=**} {\r\n    //   allow read, write: if true\r\n    //       // request.time < timestamp.date(2022, 2, 19);\r\n\r\n    // }\r\n\r\n    function numberValue(field){\r\n      return field is int || field is float\r\n    }\r\n\r\n    function optionalNumber(field){\r\n      return request.resource.data.get(field, 0) is int || \r\n        request.resource.data.get(field, 0.0) is float\r\n    }\r\n\r\n    match /users/{userId} {\r\n      allow read, create, update: if request.auth.uid == request.resource.data.uid \r\n    }\r\n\r\n    match /organizations/{orgId} {\r\n      function isOrgOwner(){\r\n         return resource.data.owner == request.auth.uid;\r\n      }\r\n\r\n      function verifyOrgData(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['owner', 'status', 'createdAt', 'modifiedAt', 'createdBy', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.keys().hasAll(allFields) &&\r\n          request.resource.data.keys().hasOnly(allFields) &&\r\n          request.resource.data.name is string &&\r\n          request.resource.data.businessTypeId is string &&\r\n          request.resource.data.businessType is map &&\r\n          request.resource.data.industry is string &&\r\n          request.resource.data.phone is string &&\r\n          request.resource.data.website is string &&\r\n          request.resource.data.country is string &&\r\n          request.resource.data.state is string &&\r\n          request.resource.data.city is string &&\r\n          request.resource.data.postalCode is string &&\r\n          request.resource.data.street is string &&\r\n          request.resource.data.owner is string &&\r\n          request.resource.data.status is string &&\r\n          request.resource.data.createdAt is timestamp &&\r\n          request.resource.data.modifiedAt is timestamp &&\r\n          request.resource.data.createdBy is string &&\r\n          request.resource.data.modifiedBy is string \r\n      }\r\n\r\n      function allowOrgUpdate(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['status', 'modifiedAt', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n      }\r\n\r\n      allow read: if isOrgOwner()\r\n      allow create: if request.auth != null && verifyOrgData()\r\n      allow update: if isOrgOwner() && verifyOrgData() && allowOrgUpdate()\r\n\r\n      function getOrgData(){\r\n        return get(/databases/$(database)/documents/organizations/$(orgId)).data\r\n      }\r\n\r\n      function isOwner(){\r\n        return request.auth.uid == getOrgData().owner\r\n      }\r\n\r\n      match /summaries/aggregate {\r\n        function verifyCountersData(){\r\n          let req1=[\"invoices\", \"deletedInvoices\", \"payments\",\"deletedPayments\", \"items\", \"customers\"];\r\n          let req2=['invoicesTotal', 'paymentsTotal', 'paymentModes', 'accounts'];\r\n          let required=req1.concat(req2);\r\n          \r\n          return request.resource.data.keys().hasAll(required) &&\r\n            numberValue(request.resource.data.invoices) &&\r\n            numberValue(request.resource.data.deletedInvoices) &&\r\n            numberValue(request.resource.data.payments) &&\r\n            numberValue(request.resource.data.deletedPayments) &&\r\n            numberValue(request.resource.data.items) &&\r\n            numberValue(request.resource.data.customers) &&\r\n            numberValue(request.resource.data.invoicesTotal) &&\r\n            numberValue(request.resource.data.paymentsTotal) &&\r\n            request.resource.data.paymentModes is map &&\r\n            request.resource.data.accounts is map\r\n        }\r\n\r\n\r\n        allow create: if request.auth != null && verifyCountersData()\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() && verifyCountersData()\r\n      }\r\n\r\n      match /orgDetails/{detailId} {\r\n        allow create: if request.auth != null\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() \r\n      }\r\n\r\n      match /accounts/{accountId} {\r\n        function verifyAccountData(){\r\n          let required=[\"accountType\", \"name\", \"amount\", \"description\", \"tags\"];\r\n          let additional=[\"status\", \"createdAt\", \"modifiedAt\", 'createdBy', 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.accountType is map &&\r\n            request.resource.data.accountType.id is string &&\r\n            request.resource.data.accountType.main is string &&\r\n            request.resource.data.accountType.name is string &&\r\n            request.resource.data.name is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.description is string &&\r\n            request.resource.data.tags is list\r\n        }\r\n\r\n        function allowAccountUpdate(){\r\n          let required=[\"name\", \"amount\", \"description\"];\r\n          let additional=[\"status\", \"modifiedAt\", 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if request.auth != null && verifyAccountData()\r\n        allow update: if isOwner() && verifyAccountData() && allowAccountUpdate()\r\n\r\n        match /transactions/{transactionId}{\r\n          allow read:if true\r\n        }\r\n      }\r\n      \r\n\r\n      match /items/{itemId} {\r\n        function getFixedValues(){\r\n          return ['createdBy', 'createdAt'];\r\n        }\r\n\r\n        function verifyItemData(){\r\n          let form1=['name', 'type', 'sku', 'skuOption', 'unit'];\r\n          let form2=['sellingPrice', 'salesAccount'];\r\n          let additional=['status', 'createdBy', 'createdAt', 'modifiedBy',  'modifiedAt'];\r\n          let optional=['variant', 'costPrice', 'salesTax', \"salesTaxType\", 'extraDetails'];\r\n          let required=form1.concat(form2).concat(additional);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.sku is string &&\r\n            request.resource.data.skuOption is string &&\r\n            request.resource.data.unit is string &&\r\n            numberValue(request.resource.data.sellingPrice) &&\r\n            request.resource.data.salesAccount is map &&\r\n            request.resource.data.get(\"variant\", '') is string &&\r\n            optionalNumber(\"costPrice\") &&\r\n            request.resource.data.get('salesTax', {}) is map &&\r\n            request.resource.data.get(\"salesTaxType\", \"\") is string &&\r\n            request.resource.data.get(\"extraDetails\", \"\") is string &&  \r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp        \r\n        }\r\n\r\n        function allowItemUpdate(){\r\n         let fixed=getFixedValues();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner();\r\n        allow create: if isOwner() && verifyItemData();\r\n        allow update: if isOwner() && verifyItemData() && allowItemUpdate()\r\n      }\r\n\r\n      match /taxes/{taxId} {\r\n        function verifyTaxData(){\r\n          let general=['name', 'rate', 'status', 'createdAt', 'createdBy', 'modifiedBy', 'modifiedAt'];\r\n          \r\n          return request.resource.data.keys().hasAll(general) &&\r\n            request.resource.data.keys().hasOnly(general) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.rate is int &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp\r\n        }\r\n\r\n        function allowTaxUpdate(){\r\n          let general=['name', 'rate', 'status', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(general)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyTaxData()\r\n        allow update: if isOwner() && verifyTaxData() && allowTaxUpdate()\r\n\r\n      }\r\n\r\n      match /journals/{entryId} {\r\n        function verifyJournalData(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"date\", \"status\", \"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(required) &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.amountState is string &&\r\n            request.resource.data.date is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountType is map &&\r\n            request.resource.data.account.name is string &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.debit) &&\r\n            numberValue(request.resource.data.credit) &&\r\n            request.resource.data.transactionId is string &&\r\n            request.resource.data.transactionDetails is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowJournalUpdate(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"status\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(required)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyJournalData()\r\n        allow update: if isOwner() && verifyJournalData() && allowJournalUpdate()\r\n        allow delete: if isOwner()\r\n      }\r\n\r\n      match /customers/{customerId} {\r\n        function customerFixed(){\r\n          return ['createdAt', 'createdBy'];\r\n        }\r\n        function verifyCustomerData(){\r\n          let details=['type','salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['openingBalance', 'paymentTerm', 'website', 'remarks'];\r\n          let fixed=customerFixed();\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'].concat(fixed);\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            numberValue(request.resource.data.openingBalance) &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.invoices is int &&\r\n            request.resource.data.summary.deletedInvoices is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.invoicedAmount) &&\r\n            numberValue(request.resource.data.summary.invoicePayments) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowCustomerUpdate(){\r\n          let fixed=customerFixed();\r\n          let allFields=[\"openingBalance\"].concat(fixed);\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt', \"summary\"];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyCustomerData()\r\n        allow update: if isOwner() && verifyCustomerData() &&\r\n          (allowCustomerUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      match /vendors/{vendorId} {\r\n        function verifyVendorData(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'createdAt', 'createdBy', 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.bills is int &&\r\n            request.resource.data.summary.deletedBills is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            request.resource.data.summary.expenses is int &&\r\n            request.resource.data.summary.deletedExpenses is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.totalBills) &&\r\n            numberValue(request.resource.data.summary.totalPayments) &&\r\n            numberValue(request.resource.data.summary.totalExpenses) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowVendorUpdate(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyVendorData()\r\n        allow update: if isOwner() && verifyVendorData() &&\r\n          (allowVendorUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      function validateSalesSummary(data){\r\n        return data.summary is map &&\r\n          numberValue(data.summary.shipping) &&\r\n          numberValue(data.summary.adjustment) &&\r\n          numberValue(data.summary.subTotal) &&\r\n          numberValue(data.summary.totalAmount) &&\r\n          numberValue(data.summary.totalTax) &&\r\n          data.get(\"summary.taxes\", []) is list\r\n      }\r\n\r\n      match /invoices/{invoiceId} {\r\n        function balanceIsValid(){\r\n           return numberValue(request.resource.data.balance) &&\r\n            request.resource.data.balance >= 0 && \r\n            request.resource.data.balance <= request.resource.data.summary.totalAmount\r\n        }\r\n\r\n        function invoiceFixed(){\r\n          return ['org', 'transactionType', 'createdAt', 'createdBy'];\r\n        }\r\n        \r\n        function verifyInvoiceData(){\r\n          let form=['customer', 'invoiceDate', \"paymentTerm\", 'dueDate', 'selectedItems'];\r\n          let formExtras=['summary', \"balance\", 'paymentsReceived','paymentsIds','paymentsCount'];\r\n          let optional=['orderNumber', 'subject', 'customerNotes'];\r\n          let meta=['status', \"isSent\", 'modifiedAt', 'modifiedBy'];\r\n          let fixed=invoiceFixed();\r\n          let required=form.concat(formExtras).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.selectedItems is list &&\r\n            request.resource.data.paymentsReceived is map &&\r\n            request.resource.data.paymentsIds is list &&\r\n            request.resource.data.paymentsCount is int &&\r\n            request.resource.data.summary is map &&\r\n            optionalNumber(\"summary.shipping\") &&\r\n            optionalNumber(\"summary.adjustment\") &&\r\n            optionalNumber(\"summary.subTotal\") &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            optionalNumber(\"summary.totalTax\") &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.paymentTerm.value is string &&\r\n            request.resource.data.invoiceDate is timestamp &&\r\n            request.resource.data.dueDate is timestamp &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.get(\"customerNotes\", \"\")  is string &&\r\n            request.resource.data.get(\"orderNumber\", \"\") is string &&\r\n            request.resource.data.get(\"subject\", \"\") is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.transactionType is string &&\r\n            balanceIsValid()\r\n        }\r\n\r\n        \r\n\r\n        function allowInvoiceUpdate(){\r\n          let fixedFields=invoiceFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixedFields)\r\n        }\r\n\r\n        function invoiceIsPaid(){\r\n          return request.resource.data.paymentsCount > 0 ||\r\n            request.resource.data.balance < request.resource.data.summary.totalAmount\r\n        }\r\n        function allowCustomerChange(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.customer.customerId != resource.data.customer.customerId\r\n        }\r\n        function allowDelete(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.status == \"deleted\"\r\n        }\r\n        function allowNormalUpdate(){\r\n          return request.resource.data.status != \"deleted\" &&\r\n            request.resource.data.customer.customerId == resource.data.customer.customerId\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyInvoiceData()\r\n        allow update: if isOwner() && verifyInvoiceData() && allowInvoiceUpdate() &&\r\n          (allowNormalUpdate() || allowCustomerChange() || allowDelete())\r\n        allow delete: if isOwner() &&\r\n          resource.data.transactionType == \"customer_opening_balance\"\r\n      }\r\n\r\n     \r\n      match /payments/{paymentId} {\r\n        function paymentsFixed(){\r\n          return ['org', 'createdBy', \"createdAt\"];\r\n        }\r\n\r\n        function verifyPaymentData(){\r\n          let form=['account', 'amount', 'customer', 'paymentDate', \"paymentMode\"];\r\n          let details=[\"payments\", \"paidInvoicesIds\", 'excess'];\r\n          let meta=['status', 'modifiedBy', \"modifiedAt\", \"transactionType\"];\r\n          let optional=['reference'];\r\n          let fixed=paymentsFixed();\r\n          let required=form.concat(details).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            numberValue(request.resource.data.excess) &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentDate is timestamp &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.paymentMode.value is string &&\r\n            request.resource.data.payments is map &&\r\n            request.resource.data.paidInvoicesIds is list &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.get(\"reference\", \"\") is string\r\n            // numberValue(request.resource.data.bankCharges) &&\r\n            // request.resource.data.taxDeducted is string &&\r\n            // request.resource.data.tdsTaxAccount is string \r\n\r\n        }\r\n\r\n        function allowPaymentUpdate(){\r\n          let fixed=paymentsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyPaymentData()\r\n        allow update: if isOwner() && verifyPaymentData() && allowPaymentUpdate()\r\n      }\r\n\r\n      match /salesReceipts/{receiptId} {\r\n        function salesReceiptsFixed(){\r\n          return ['createdAt', 'createdBy', 'org', 'transactionType'];\r\n        }\r\n        function verifySalesReceiptData(){\r\n          let form=[\"receiptDate\", \"account\", 'paymentMode', \"reference\", 'customerNotes'];\r\n          let optional=[\"customer\"];\r\n          let sale=['selectedItems', 'summary'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'isSent', 'status'];\r\n          let fixed=salesReceiptsFixed();\r\n          let required=form.concat(sale).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.get(\"customer\", {}) is map &&\r\n            request.resource.data.receiptDate is timestamp &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.customerNotes is string &&\r\n            request.resource.data.selectedItems is list &&\r\n            validateSalesSummary(request.resource.data) &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.status is string\r\n        }\r\n\r\n        function allowSalesReceiptUpdate(){\r\n          let fixed=salesReceiptsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifySalesReceiptData()\r\n        allow update: if isOwner() && verifySalesReceiptData() &&\r\n          allowSalesReceiptUpdate()\r\n      }\r\n\r\n      match /expenses/{expenseId} {\r\n        function expenseFixed(){\r\n          return ['createdAt', 'createdBy', 'org'];\r\n        }\r\n        function verifyExpenseData(){\r\n          let form=[\"expenseDate\", \"paymentAccount\", 'paymentMode', \"reference\"];\r\n          let optional=['vendor'];\r\n          let expense=['items', 'summary', 'transactionType', 'taxType'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'status'];\r\n          let fixed=expenseFixed();\r\n          let required=form.concat(expense).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.expenseDate is timestamp &&\r\n            request.resource.data.paymentAccount is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.get('vendor', {}) is map &&\r\n            request.resource.data.items is list &&\r\n            request.resource.data.summary is map &&\r\n            numberValue(request.resource.data.summary.subTotal) &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            numberValue(request.resource.data.summary.totalTax) &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.taxType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map \r\n        }\r\n\r\n        function allowExpenseUpdate(){\r\n          let fixed=expenseFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyExpenseData()\r\n        allow update: if isOwner() && verifyExpenseData() &&\r\n          allowExpenseUpdate()\r\n      }\r\n    }\r\n  }\r\n}"}]}}
[debug] [2022-09-09T21:35:51.652Z] <<< [apiv2][status] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules 200
[debug] [2022-09-09T21:35:51.653Z] <<< [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2022-09-09T21:43:01.482Z] >>> [apiv2][query] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules [none]
[debug] [2022-09-09T21:43:01.483Z] >>> [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // match /{document=**} {\r\n    //   allow read, write: if true\r\n    //       // request.time < timestamp.date(2022, 2, 19);\r\n\r\n    // }\r\n\r\n    function numberValue(field){\r\n      return field is int || field is float\r\n    }\r\n\r\n    function optionalNumber(field){\r\n      return request.resource.data.get(field, 0) is int || \r\n        request.resource.data.get(field, 0.0) is float\r\n    }\r\n\r\n    match /users/{userId} {\r\n      allow read, create, update: if request.auth.uid == request.resource.data.uid \r\n    }\r\n\r\n    match /organizations/{orgId} {\r\n      function isOrgOwner(){\r\n         return resource.data.owner == request.auth.uid;\r\n      }\r\n\r\n      function verifyOrgData(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['owner', 'status', 'createdAt', 'modifiedAt', 'createdBy', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.keys().hasAll(allFields) &&\r\n          request.resource.data.keys().hasOnly(allFields) &&\r\n          request.resource.data.name is string &&\r\n          request.resource.data.businessTypeId is string &&\r\n          request.resource.data.businessType is map &&\r\n          request.resource.data.industry is string &&\r\n          request.resource.data.phone is string &&\r\n          request.resource.data.website is string &&\r\n          request.resource.data.country is string &&\r\n          request.resource.data.state is string &&\r\n          request.resource.data.city is string &&\r\n          request.resource.data.postalCode is string &&\r\n          request.resource.data.street is string &&\r\n          request.resource.data.owner is string &&\r\n          request.resource.data.status is string &&\r\n          request.resource.data.createdAt is timestamp &&\r\n          request.resource.data.modifiedAt is timestamp &&\r\n          request.resource.data.createdBy is string &&\r\n          request.resource.data.modifiedBy is string \r\n      }\r\n\r\n      function allowOrgUpdate(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['status', 'modifiedAt', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n      }\r\n\r\n      allow read: if isOrgOwner()\r\n      allow create: if request.auth != null && verifyOrgData()\r\n      allow update: if isOrgOwner() && verifyOrgData() && allowOrgUpdate()\r\n\r\n      function getOrgData(){\r\n        return get(/databases/$(database)/documents/organizations/$(orgId)).data\r\n      }\r\n\r\n      function isOwner(){\r\n        return request.auth.uid == getOrgData().owner\r\n      }\r\n\r\n      match /summaries/aggregate {\r\n        function verifyCountersData(){\r\n          let req1=[\"invoices\", \"deletedInvoices\", \"payments\",\"deletedPayments\", \"items\", \"customers\"];\r\n          let req2=['invoicesTotal', 'paymentsTotal', 'paymentModes', 'accounts'];\r\n          let required=req1.concat(req2);\r\n          \r\n          return request.resource.data.keys().hasAll(required) &&\r\n            numberValue(request.resource.data.invoices) &&\r\n            numberValue(request.resource.data.deletedInvoices) &&\r\n            numberValue(request.resource.data.payments) &&\r\n            numberValue(request.resource.data.deletedPayments) &&\r\n            numberValue(request.resource.data.items) &&\r\n            numberValue(request.resource.data.customers) &&\r\n            numberValue(request.resource.data.invoicesTotal) &&\r\n            numberValue(request.resource.data.paymentsTotal) &&\r\n            // request.resource.data.paymentModes is map &&\r\n            // request.resource.data.accounts is map\r\n        }\r\n\r\n\r\n        allow create: if request.auth != null && verifyCountersData()\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() && verifyCountersData()\r\n      }\r\n\r\n      match /orgDetails/{detailId} {\r\n        allow create: if request.auth != null\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() \r\n      }\r\n\r\n      match /accounts/{accountId} {\r\n        function verifyAccountData(){\r\n          let required=[\"accountType\", \"name\", \"amount\", \"description\", \"tags\"];\r\n          let additional=[\"status\", \"createdAt\", \"modifiedAt\", 'createdBy', 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.accountType is map &&\r\n            request.resource.data.accountType.id is string &&\r\n            request.resource.data.accountType.main is string &&\r\n            request.resource.data.accountType.name is string &&\r\n            request.resource.data.name is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.description is string &&\r\n            request.resource.data.tags is list\r\n        }\r\n\r\n        function allowAccountUpdate(){\r\n          let required=[\"name\", \"amount\", \"description\"];\r\n          let additional=[\"status\", \"modifiedAt\", 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if request.auth != null && verifyAccountData()\r\n        allow update: if isOwner() && verifyAccountData() && allowAccountUpdate()\r\n\r\n        match /transactions/{transactionId}{\r\n          allow read:if true\r\n        }\r\n      }\r\n      \r\n\r\n      match /items/{itemId} {\r\n        function getFixedValues(){\r\n          return ['createdBy', 'createdAt'];\r\n        }\r\n\r\n        function verifyItemData(){\r\n          let form1=['name', 'type', 'sku', 'skuOption', 'unit'];\r\n          let form2=['sellingPrice', 'salesAccount'];\r\n          let additional=['status', 'createdBy', 'createdAt', 'modifiedBy',  'modifiedAt'];\r\n          let optional=['variant', 'costPrice', 'salesTax', \"salesTaxType\", 'extraDetails'];\r\n          let required=form1.concat(form2).concat(additional);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.sku is string &&\r\n            request.resource.data.skuOption is string &&\r\n            request.resource.data.unit is string &&\r\n            numberValue(request.resource.data.sellingPrice) &&\r\n            request.resource.data.salesAccount is map &&\r\n            request.resource.data.get(\"variant\", '') is string &&\r\n            optionalNumber(\"costPrice\") &&\r\n            request.resource.data.get('salesTax', {}) is map &&\r\n            request.resource.data.get(\"salesTaxType\", \"\") is string &&\r\n            request.resource.data.get(\"extraDetails\", \"\") is string &&  \r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp        \r\n        }\r\n\r\n        function allowItemUpdate(){\r\n         let fixed=getFixedValues();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner();\r\n        allow create: if isOwner() && verifyItemData();\r\n        allow update: if isOwner() && verifyItemData() && allowItemUpdate()\r\n      }\r\n\r\n      match /taxes/{taxId} {\r\n        function verifyTaxData(){\r\n          let general=['name', 'rate', 'status', 'createdAt', 'createdBy', 'modifiedBy', 'modifiedAt'];\r\n          \r\n          return request.resource.data.keys().hasAll(general) &&\r\n            request.resource.data.keys().hasOnly(general) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.rate is int &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp\r\n        }\r\n\r\n        function allowTaxUpdate(){\r\n          let general=['name', 'rate', 'status', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(general)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyTaxData()\r\n        allow update: if isOwner() && verifyTaxData() && allowTaxUpdate()\r\n\r\n      }\r\n\r\n      match /journals/{entryId} {\r\n        function verifyJournalData(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"date\", \"status\", \"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(required) &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.amountState is string &&\r\n            request.resource.data.date is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountType is map &&\r\n            request.resource.data.account.name is string &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.debit) &&\r\n            numberValue(request.resource.data.credit) &&\r\n            request.resource.data.transactionId is string &&\r\n            request.resource.data.transactionDetails is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowJournalUpdate(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"status\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(required)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyJournalData()\r\n        allow update: if isOwner() && verifyJournalData() && allowJournalUpdate()\r\n        allow delete: if isOwner()\r\n      }\r\n\r\n      match /customers/{customerId} {\r\n        function customerFixed(){\r\n          return ['createdAt', 'createdBy'];\r\n        }\r\n        function verifyCustomerData(){\r\n          let details=['type','salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['openingBalance', 'paymentTerm', 'website', 'remarks'];\r\n          let fixed=customerFixed();\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'].concat(fixed);\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            numberValue(request.resource.data.openingBalance) &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.invoices is int &&\r\n            request.resource.data.summary.deletedInvoices is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.invoicedAmount) &&\r\n            numberValue(request.resource.data.summary.invoicePayments) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowCustomerUpdate(){\r\n          let fixed=customerFixed();\r\n          let allFields=[\"openingBalance\"].concat(fixed);\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt', \"summary\"];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyCustomerData()\r\n        allow update: if isOwner() && verifyCustomerData() &&\r\n          (allowCustomerUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      match /vendors/{vendorId} {\r\n        function verifyVendorData(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'createdAt', 'createdBy', 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.bills is int &&\r\n            request.resource.data.summary.deletedBills is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            request.resource.data.summary.expenses is int &&\r\n            request.resource.data.summary.deletedExpenses is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.totalBills) &&\r\n            numberValue(request.resource.data.summary.totalPayments) &&\r\n            numberValue(request.resource.data.summary.totalExpenses) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowVendorUpdate(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyVendorData()\r\n        allow update: if isOwner() && verifyVendorData() &&\r\n          (allowVendorUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      function validateSalesSummary(data){\r\n        return data.summary is map &&\r\n          numberValue(data.summary.shipping) &&\r\n          numberValue(data.summary.adjustment) &&\r\n          numberValue(data.summary.subTotal) &&\r\n          numberValue(data.summary.totalAmount) &&\r\n          numberValue(data.summary.totalTax) &&\r\n          data.get(\"summary.taxes\", []) is list\r\n      }\r\n\r\n      match /invoices/{invoiceId} {\r\n        function balanceIsValid(){\r\n           return numberValue(request.resource.data.balance) &&\r\n            request.resource.data.balance >= 0 && \r\n            request.resource.data.balance <= request.resource.data.summary.totalAmount\r\n        }\r\n\r\n        function invoiceFixed(){\r\n          return ['org', 'transactionType', 'createdAt', 'createdBy'];\r\n        }\r\n        \r\n        function verifyInvoiceData(){\r\n          let form=['customer', 'invoiceDate', \"paymentTerm\", 'dueDate', 'selectedItems'];\r\n          let formExtras=['summary', \"balance\", 'paymentsReceived','paymentsIds','paymentsCount'];\r\n          let optional=['orderNumber', 'subject', 'customerNotes'];\r\n          let meta=['status', \"isSent\", 'modifiedAt', 'modifiedBy'];\r\n          let fixed=invoiceFixed();\r\n          let required=form.concat(formExtras).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.selectedItems is list &&\r\n            request.resource.data.paymentsReceived is map &&\r\n            request.resource.data.paymentsIds is list &&\r\n            request.resource.data.paymentsCount is int &&\r\n            request.resource.data.summary is map &&\r\n            optionalNumber(\"summary.shipping\") &&\r\n            optionalNumber(\"summary.adjustment\") &&\r\n            optionalNumber(\"summary.subTotal\") &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            optionalNumber(\"summary.totalTax\") &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.paymentTerm.value is string &&\r\n            request.resource.data.invoiceDate is timestamp &&\r\n            request.resource.data.dueDate is timestamp &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.get(\"customerNotes\", \"\")  is string &&\r\n            request.resource.data.get(\"orderNumber\", \"\") is string &&\r\n            request.resource.data.get(\"subject\", \"\") is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.transactionType is string &&\r\n            balanceIsValid()\r\n        }\r\n\r\n        \r\n\r\n        function allowInvoiceUpdate(){\r\n          let fixedFields=invoiceFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixedFields)\r\n        }\r\n\r\n        function invoiceIsPaid(){\r\n          return request.resource.data.paymentsCount > 0 ||\r\n            request.resource.data.balance < request.resource.data.summary.totalAmount\r\n        }\r\n        function allowCustomerChange(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.customer.customerId != resource.data.customer.customerId\r\n        }\r\n        function allowDelete(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.status == \"deleted\"\r\n        }\r\n        function allowNormalUpdate(){\r\n          return request.resource.data.status != \"deleted\" &&\r\n            request.resource.data.customer.customerId == resource.data.customer.customerId\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyInvoiceData()\r\n        allow update: if isOwner() && verifyInvoiceData() && allowInvoiceUpdate() &&\r\n          (allowNormalUpdate() || allowCustomerChange() || allowDelete())\r\n        allow delete: if isOwner() &&\r\n          resource.data.transactionType == \"customer_opening_balance\"\r\n      }\r\n\r\n     \r\n      match /payments/{paymentId} {\r\n        function paymentsFixed(){\r\n          return ['org', 'createdBy', \"createdAt\"];\r\n        }\r\n\r\n        function verifyPaymentData(){\r\n          let form=['account', 'amount', 'customer', 'paymentDate', \"paymentMode\"];\r\n          let details=[\"payments\", \"paidInvoicesIds\", 'excess'];\r\n          let meta=['status', 'modifiedBy', \"modifiedAt\", \"transactionType\"];\r\n          let optional=['reference'];\r\n          let fixed=paymentsFixed();\r\n          let required=form.concat(details).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            numberValue(request.resource.data.excess) &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentDate is timestamp &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.paymentMode.value is string &&\r\n            request.resource.data.payments is map &&\r\n            request.resource.data.paidInvoicesIds is list &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.get(\"reference\", \"\") is string\r\n            // numberValue(request.resource.data.bankCharges) &&\r\n            // request.resource.data.taxDeducted is string &&\r\n            // request.resource.data.tdsTaxAccount is string \r\n\r\n        }\r\n\r\n        function allowPaymentUpdate(){\r\n          let fixed=paymentsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyPaymentData()\r\n        allow update: if isOwner() && verifyPaymentData() && allowPaymentUpdate()\r\n      }\r\n\r\n      match /salesReceipts/{receiptId} {\r\n        function salesReceiptsFixed(){\r\n          return ['createdAt', 'createdBy', 'org', 'transactionType'];\r\n        }\r\n        function verifySalesReceiptData(){\r\n          let form=[\"receiptDate\", \"account\", 'paymentMode', \"reference\", 'customerNotes'];\r\n          let optional=[\"customer\"];\r\n          let sale=['selectedItems', 'summary'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'isSent', 'status'];\r\n          let fixed=salesReceiptsFixed();\r\n          let required=form.concat(sale).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.get(\"customer\", {}) is map &&\r\n            request.resource.data.receiptDate is timestamp &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.customerNotes is string &&\r\n            request.resource.data.selectedItems is list &&\r\n            validateSalesSummary(request.resource.data) &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.status is string\r\n        }\r\n\r\n        function allowSalesReceiptUpdate(){\r\n          let fixed=salesReceiptsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifySalesReceiptData()\r\n        allow update: if isOwner() && verifySalesReceiptData() &&\r\n          allowSalesReceiptUpdate()\r\n      }\r\n\r\n      match /expenses/{expenseId} {\r\n        function expenseFixed(){\r\n          return ['createdAt', 'createdBy', 'org'];\r\n        }\r\n        function verifyExpenseData(){\r\n          let form=[\"expenseDate\", \"paymentAccount\", 'paymentMode', \"reference\"];\r\n          let optional=['vendor'];\r\n          let expense=['items', 'summary', 'transactionType', 'taxType'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'status'];\r\n          let fixed=expenseFixed();\r\n          let required=form.concat(expense).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.expenseDate is timestamp &&\r\n            request.resource.data.paymentAccount is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.get('vendor', {}) is map &&\r\n            request.resource.data.items is list &&\r\n            request.resource.data.summary is map &&\r\n            numberValue(request.resource.data.summary.subTotal) &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            numberValue(request.resource.data.summary.totalTax) &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.taxType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map \r\n        }\r\n\r\n        function allowExpenseUpdate(){\r\n          let fixed=expenseFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyExpenseData()\r\n        allow update: if isOwner() && verifyExpenseData() &&\r\n          allowExpenseUpdate()\r\n      }\r\n    }\r\n  }\r\n}"}]}}
[debug] [2022-09-09T21:43:01.808Z] <<< [apiv2][status] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules 200
[debug] [2022-09-09T21:43:01.808Z] <<< [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":93,"column":9,"currentOffset":4034,"endOffset":4034},"description":"mismatched input '}' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES}","severity":"ERROR"}]}
[warn] !  firestore.rules:93:9 - ERROR mismatched input '}' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2022-09-09T21:43:13.120Z] >>> [apiv2][query] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules [none]
[debug] [2022-09-09T21:43:13.120Z] >>> [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // match /{document=**} {\r\n    //   allow read, write: if true\r\n    //       // request.time < timestamp.date(2022, 2, 19);\r\n\r\n    // }\r\n\r\n    function numberValue(field){\r\n      return field is int || field is float\r\n    }\r\n\r\n    function optionalNumber(field){\r\n      return request.resource.data.get(field, 0) is int || \r\n        request.resource.data.get(field, 0.0) is float\r\n    }\r\n\r\n    match /users/{userId} {\r\n      allow read, create, update: if request.auth.uid == request.resource.data.uid \r\n    }\r\n\r\n    match /organizations/{orgId} {\r\n      function isOrgOwner(){\r\n         return resource.data.owner == request.auth.uid;\r\n      }\r\n\r\n      function verifyOrgData(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['owner', 'status', 'createdAt', 'modifiedAt', 'createdBy', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.keys().hasAll(allFields) &&\r\n          request.resource.data.keys().hasOnly(allFields) &&\r\n          request.resource.data.name is string &&\r\n          request.resource.data.businessTypeId is string &&\r\n          request.resource.data.businessType is map &&\r\n          request.resource.data.industry is string &&\r\n          request.resource.data.phone is string &&\r\n          request.resource.data.website is string &&\r\n          request.resource.data.country is string &&\r\n          request.resource.data.state is string &&\r\n          request.resource.data.city is string &&\r\n          request.resource.data.postalCode is string &&\r\n          request.resource.data.street is string &&\r\n          request.resource.data.owner is string &&\r\n          request.resource.data.status is string &&\r\n          request.resource.data.createdAt is timestamp &&\r\n          request.resource.data.modifiedAt is timestamp &&\r\n          request.resource.data.createdBy is string &&\r\n          request.resource.data.modifiedBy is string \r\n      }\r\n\r\n      function allowOrgUpdate(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['status', 'modifiedAt', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n      }\r\n\r\n      allow read: if isOrgOwner()\r\n      allow create: if request.auth != null && verifyOrgData()\r\n      allow update: if isOrgOwner() && verifyOrgData() && allowOrgUpdate()\r\n\r\n      function getOrgData(){\r\n        return get(/databases/$(database)/documents/organizations/$(orgId)).data\r\n      }\r\n\r\n      function isOwner(){\r\n        return request.auth.uid == getOrgData().owner\r\n      }\r\n\r\n      match /summaries/aggregate {\r\n        function verifyCountersData(){\r\n          let req1=[\"invoices\", \"deletedInvoices\", \"payments\",\"deletedPayments\", \"items\", \"customers\"];\r\n          let req2=['invoicesTotal', 'paymentsTotal', 'paymentModes', 'accounts'];\r\n          let required=req1.concat(req2);\r\n          \r\n          return request.resource.data.keys().hasAll(required) &&\r\n            numberValue(request.resource.data.invoices) &&\r\n            numberValue(request.resource.data.deletedInvoices) &&\r\n            numberValue(request.resource.data.payments) &&\r\n            numberValue(request.resource.data.deletedPayments) &&\r\n            numberValue(request.resource.data.items) &&\r\n            numberValue(request.resource.data.customers) &&\r\n            numberValue(request.resource.data.invoicesTotal) &&\r\n            numberValue(request.resource.data.paymentsTotal) \r\n            // request.resource.data.paymentModes is map &&\r\n            // request.resource.data.accounts is map\r\n        }\r\n\r\n\r\n        allow create: if request.auth != null && verifyCountersData()\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() && verifyCountersData()\r\n      }\r\n\r\n      match /orgDetails/{detailId} {\r\n        allow create: if request.auth != null\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() \r\n      }\r\n\r\n      match /accounts/{accountId} {\r\n        function verifyAccountData(){\r\n          let required=[\"accountType\", \"name\", \"amount\", \"description\", \"tags\"];\r\n          let additional=[\"status\", \"createdAt\", \"modifiedAt\", 'createdBy', 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.accountType is map &&\r\n            request.resource.data.accountType.id is string &&\r\n            request.resource.data.accountType.main is string &&\r\n            request.resource.data.accountType.name is string &&\r\n            request.resource.data.name is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.description is string &&\r\n            request.resource.data.tags is list\r\n        }\r\n\r\n        function allowAccountUpdate(){\r\n          let required=[\"name\", \"amount\", \"description\"];\r\n          let additional=[\"status\", \"modifiedAt\", 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if request.auth != null && verifyAccountData()\r\n        allow update: if isOwner() && verifyAccountData() && allowAccountUpdate()\r\n\r\n        match /transactions/{transactionId}{\r\n          allow read:if true\r\n        }\r\n      }\r\n      \r\n\r\n      match /items/{itemId} {\r\n        function getFixedValues(){\r\n          return ['createdBy', 'createdAt'];\r\n        }\r\n\r\n        function verifyItemData(){\r\n          let form1=['name', 'type', 'sku', 'skuOption', 'unit'];\r\n          let form2=['sellingPrice', 'salesAccount'];\r\n          let additional=['status', 'createdBy', 'createdAt', 'modifiedBy',  'modifiedAt'];\r\n          let optional=['variant', 'costPrice', 'salesTax', \"salesTaxType\", 'extraDetails'];\r\n          let required=form1.concat(form2).concat(additional);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.sku is string &&\r\n            request.resource.data.skuOption is string &&\r\n            request.resource.data.unit is string &&\r\n            numberValue(request.resource.data.sellingPrice) &&\r\n            request.resource.data.salesAccount is map &&\r\n            request.resource.data.get(\"variant\", '') is string &&\r\n            optionalNumber(\"costPrice\") &&\r\n            request.resource.data.get('salesTax', {}) is map &&\r\n            request.resource.data.get(\"salesTaxType\", \"\") is string &&\r\n            request.resource.data.get(\"extraDetails\", \"\") is string &&  \r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp        \r\n        }\r\n\r\n        function allowItemUpdate(){\r\n         let fixed=getFixedValues();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner();\r\n        allow create: if isOwner() && verifyItemData();\r\n        allow update: if isOwner() && verifyItemData() && allowItemUpdate()\r\n      }\r\n\r\n      match /taxes/{taxId} {\r\n        function verifyTaxData(){\r\n          let general=['name', 'rate', 'status', 'createdAt', 'createdBy', 'modifiedBy', 'modifiedAt'];\r\n          \r\n          return request.resource.data.keys().hasAll(general) &&\r\n            request.resource.data.keys().hasOnly(general) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.rate is int &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp\r\n        }\r\n\r\n        function allowTaxUpdate(){\r\n          let general=['name', 'rate', 'status', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(general)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyTaxData()\r\n        allow update: if isOwner() && verifyTaxData() && allowTaxUpdate()\r\n\r\n      }\r\n\r\n      match /journals/{entryId} {\r\n        function verifyJournalData(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"date\", \"status\", \"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(required) &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.amountState is string &&\r\n            request.resource.data.date is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountType is map &&\r\n            request.resource.data.account.name is string &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.debit) &&\r\n            numberValue(request.resource.data.credit) &&\r\n            request.resource.data.transactionId is string &&\r\n            request.resource.data.transactionDetails is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowJournalUpdate(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"status\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(required)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyJournalData()\r\n        allow update: if isOwner() && verifyJournalData() && allowJournalUpdate()\r\n        allow delete: if isOwner()\r\n      }\r\n\r\n      match /customers/{customerId} {\r\n        function customerFixed(){\r\n          return ['createdAt', 'createdBy'];\r\n        }\r\n        function verifyCustomerData(){\r\n          let details=['type','salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['openingBalance', 'paymentTerm', 'website', 'remarks'];\r\n          let fixed=customerFixed();\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'].concat(fixed);\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            numberValue(request.resource.data.openingBalance) &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.invoices is int &&\r\n            request.resource.data.summary.deletedInvoices is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.invoicedAmount) &&\r\n            numberValue(request.resource.data.summary.invoicePayments) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowCustomerUpdate(){\r\n          let fixed=customerFixed();\r\n          let allFields=[\"openingBalance\"].concat(fixed);\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt', \"summary\"];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyCustomerData()\r\n        allow update: if isOwner() && verifyCustomerData() &&\r\n          (allowCustomerUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      match /vendors/{vendorId} {\r\n        function verifyVendorData(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'createdAt', 'createdBy', 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.bills is int &&\r\n            request.resource.data.summary.deletedBills is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            request.resource.data.summary.expenses is int &&\r\n            request.resource.data.summary.deletedExpenses is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.totalBills) &&\r\n            numberValue(request.resource.data.summary.totalPayments) &&\r\n            numberValue(request.resource.data.summary.totalExpenses) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowVendorUpdate(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyVendorData()\r\n        allow update: if isOwner() && verifyVendorData() &&\r\n          (allowVendorUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      function validateSalesSummary(data){\r\n        return data.summary is map &&\r\n          numberValue(data.summary.shipping) &&\r\n          numberValue(data.summary.adjustment) &&\r\n          numberValue(data.summary.subTotal) &&\r\n          numberValue(data.summary.totalAmount) &&\r\n          numberValue(data.summary.totalTax) &&\r\n          data.get(\"summary.taxes\", []) is list\r\n      }\r\n\r\n      match /invoices/{invoiceId} {\r\n        function balanceIsValid(){\r\n           return numberValue(request.resource.data.balance) &&\r\n            request.resource.data.balance >= 0 && \r\n            request.resource.data.balance <= request.resource.data.summary.totalAmount\r\n        }\r\n\r\n        function invoiceFixed(){\r\n          return ['org', 'transactionType', 'createdAt', 'createdBy'];\r\n        }\r\n        \r\n        function verifyInvoiceData(){\r\n          let form=['customer', 'invoiceDate', \"paymentTerm\", 'dueDate', 'selectedItems'];\r\n          let formExtras=['summary', \"balance\", 'paymentsReceived','paymentsIds','paymentsCount'];\r\n          let optional=['orderNumber', 'subject', 'customerNotes'];\r\n          let meta=['status', \"isSent\", 'modifiedAt', 'modifiedBy'];\r\n          let fixed=invoiceFixed();\r\n          let required=form.concat(formExtras).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.selectedItems is list &&\r\n            request.resource.data.paymentsReceived is map &&\r\n            request.resource.data.paymentsIds is list &&\r\n            request.resource.data.paymentsCount is int &&\r\n            request.resource.data.summary is map &&\r\n            optionalNumber(\"summary.shipping\") &&\r\n            optionalNumber(\"summary.adjustment\") &&\r\n            optionalNumber(\"summary.subTotal\") &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            optionalNumber(\"summary.totalTax\") &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.paymentTerm.value is string &&\r\n            request.resource.data.invoiceDate is timestamp &&\r\n            request.resource.data.dueDate is timestamp &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.get(\"customerNotes\", \"\")  is string &&\r\n            request.resource.data.get(\"orderNumber\", \"\") is string &&\r\n            request.resource.data.get(\"subject\", \"\") is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.transactionType is string &&\r\n            balanceIsValid()\r\n        }\r\n\r\n        \r\n\r\n        function allowInvoiceUpdate(){\r\n          let fixedFields=invoiceFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixedFields)\r\n        }\r\n\r\n        function invoiceIsPaid(){\r\n          return request.resource.data.paymentsCount > 0 ||\r\n            request.resource.data.balance < request.resource.data.summary.totalAmount\r\n        }\r\n        function allowCustomerChange(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.customer.customerId != resource.data.customer.customerId\r\n        }\r\n        function allowDelete(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.status == \"deleted\"\r\n        }\r\n        function allowNormalUpdate(){\r\n          return request.resource.data.status != \"deleted\" &&\r\n            request.resource.data.customer.customerId == resource.data.customer.customerId\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyInvoiceData()\r\n        allow update: if isOwner() && verifyInvoiceData() && allowInvoiceUpdate() &&\r\n          (allowNormalUpdate() || allowCustomerChange() || allowDelete())\r\n        allow delete: if isOwner() &&\r\n          resource.data.transactionType == \"customer_opening_balance\"\r\n      }\r\n\r\n     \r\n      match /payments/{paymentId} {\r\n        function paymentsFixed(){\r\n          return ['org', 'createdBy', \"createdAt\"];\r\n        }\r\n\r\n        function verifyPaymentData(){\r\n          let form=['account', 'amount', 'customer', 'paymentDate', \"paymentMode\"];\r\n          let details=[\"payments\", \"paidInvoicesIds\", 'excess'];\r\n          let meta=['status', 'modifiedBy', \"modifiedAt\", \"transactionType\"];\r\n          let optional=['reference'];\r\n          let fixed=paymentsFixed();\r\n          let required=form.concat(details).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            numberValue(request.resource.data.excess) &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentDate is timestamp &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.paymentMode.value is string &&\r\n            request.resource.data.payments is map &&\r\n            request.resource.data.paidInvoicesIds is list &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.get(\"reference\", \"\") is string\r\n            // numberValue(request.resource.data.bankCharges) &&\r\n            // request.resource.data.taxDeducted is string &&\r\n            // request.resource.data.tdsTaxAccount is string \r\n\r\n        }\r\n\r\n        function allowPaymentUpdate(){\r\n          let fixed=paymentsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyPaymentData()\r\n        allow update: if isOwner() && verifyPaymentData() && allowPaymentUpdate()\r\n      }\r\n\r\n      match /salesReceipts/{receiptId} {\r\n        function salesReceiptsFixed(){\r\n          return ['createdAt', 'createdBy', 'org', 'transactionType'];\r\n        }\r\n        function verifySalesReceiptData(){\r\n          let form=[\"receiptDate\", \"account\", 'paymentMode', \"reference\", 'customerNotes'];\r\n          let optional=[\"customer\"];\r\n          let sale=['selectedItems', 'summary'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'isSent', 'status'];\r\n          let fixed=salesReceiptsFixed();\r\n          let required=form.concat(sale).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.get(\"customer\", {}) is map &&\r\n            request.resource.data.receiptDate is timestamp &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.customerNotes is string &&\r\n            request.resource.data.selectedItems is list &&\r\n            validateSalesSummary(request.resource.data) &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.status is string\r\n        }\r\n\r\n        function allowSalesReceiptUpdate(){\r\n          let fixed=salesReceiptsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifySalesReceiptData()\r\n        allow update: if isOwner() && verifySalesReceiptData() &&\r\n          allowSalesReceiptUpdate()\r\n      }\r\n\r\n      match /expenses/{expenseId} {\r\n        function expenseFixed(){\r\n          return ['createdAt', 'createdBy', 'org'];\r\n        }\r\n        function verifyExpenseData(){\r\n          let form=[\"expenseDate\", \"paymentAccount\", 'paymentMode', \"reference\"];\r\n          let optional=['vendor'];\r\n          let expense=['items', 'summary', 'transactionType', 'taxType'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'status'];\r\n          let fixed=expenseFixed();\r\n          let required=form.concat(expense).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.expenseDate is timestamp &&\r\n            request.resource.data.paymentAccount is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.get('vendor', {}) is map &&\r\n            request.resource.data.items is list &&\r\n            request.resource.data.summary is map &&\r\n            numberValue(request.resource.data.summary.subTotal) &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            numberValue(request.resource.data.summary.totalTax) &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.taxType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map \r\n        }\r\n\r\n        function allowExpenseUpdate(){\r\n          let fixed=expenseFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyExpenseData()\r\n        allow update: if isOwner() && verifyExpenseData() &&\r\n          allowExpenseUpdate()\r\n      }\r\n    }\r\n  }\r\n}"}]}}
[debug] [2022-09-09T21:43:13.567Z] <<< [apiv2][status] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules 200
[debug] [2022-09-09T21:43:13.567Z] <<< [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2022-09-09T21:44:07.965Z] >>> [apiv2][query] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules [none]
[debug] [2022-09-09T21:44:07.966Z] >>> [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // match /{document=**} {\r\n    //   allow read, write: if true\r\n    //       // request.time < timestamp.date(2022, 2, 19);\r\n\r\n    // }\r\n\r\n    function numberValue(field){\r\n      return field is int || field is float\r\n    }\r\n\r\n    function optionalNumber(field){\r\n      return request.resource.data.get(field, 0) is int || \r\n        request.resource.data.get(field, 0.0) is float\r\n    }\r\n\r\n    match /users/{userId} {\r\n      allow read, create, update: if request.auth.uid == request.resource.data.uid \r\n    }\r\n\r\n    match /organizations/{orgId} {\r\n      function isOrgOwner(){\r\n         return resource.data.owner == request.auth.uid;\r\n      }\r\n\r\n      function verifyOrgData(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['owner', 'status', 'createdAt', 'modifiedAt', 'createdBy', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.keys().hasAll(allFields) &&\r\n          request.resource.data.keys().hasOnly(allFields) &&\r\n          request.resource.data.name is string &&\r\n          request.resource.data.businessTypeId is string &&\r\n          request.resource.data.businessType is map &&\r\n          request.resource.data.industry is string &&\r\n          request.resource.data.phone is string &&\r\n          request.resource.data.website is string &&\r\n          request.resource.data.country is string &&\r\n          request.resource.data.state is string &&\r\n          request.resource.data.city is string &&\r\n          request.resource.data.postalCode is string &&\r\n          request.resource.data.street is string &&\r\n          request.resource.data.owner is string &&\r\n          request.resource.data.status is string &&\r\n          request.resource.data.createdAt is timestamp &&\r\n          request.resource.data.modifiedAt is timestamp &&\r\n          request.resource.data.createdBy is string &&\r\n          request.resource.data.modifiedBy is string \r\n      }\r\n\r\n      function allowOrgUpdate(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['status', 'modifiedAt', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n      }\r\n\r\n      allow read: if isOrgOwner()\r\n      allow create: if request.auth != null && verifyOrgData()\r\n      allow update: if isOrgOwner() && verifyOrgData() && allowOrgUpdate()\r\n\r\n      function getOrgData(){\r\n        return get(/databases/$(database)/documents/organizations/$(orgId)).data\r\n      }\r\n\r\n      function isOwner(){\r\n        return request.auth.uid == getOrgData().owner\r\n      }\r\n\r\n      match /summaries/aggregate {\r\n        function verifyCountersData(){\r\n          let req1=[\"invoices\", \"deletedInvoices\", \"payments\",\"deletedPayments\", \"items\", \"customers\"];\r\n          let req2=['invoicesTotal', 'paymentsTotal', 'paymentModes', 'accounts'];\r\n          let required=req1.concat(req2);\r\n          \r\n          return request.resource.data.keys().hasAll(required) \r\n            // numberValue(request.resource.data.invoices) &&\r\n            // numberValue(request.resource.data.deletedInvoices) &&\r\n            // numberValue(request.resource.data.payments) &&\r\n            // numberValue(request.resource.data.deletedPayments) &&\r\n            // numberValue(request.resource.data.items) &&\r\n            // numberValue(request.resource.data.customers) &&\r\n            // numberValue(request.resource.data.invoicesTotal) &&\r\n            // numberValue(request.resource.data.paymentsTotal) \r\n            // request.resource.data.paymentModes is map &&\r\n            // request.resource.data.accounts is map\r\n        }\r\n\r\n\r\n        allow create: if request.auth != null && verifyCountersData()\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() && verifyCountersData()\r\n      }\r\n\r\n      match /orgDetails/{detailId} {\r\n        allow create: if request.auth != null\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() \r\n      }\r\n\r\n      match /accounts/{accountId} {\r\n        function verifyAccountData(){\r\n          let required=[\"accountType\", \"name\", \"amount\", \"description\", \"tags\"];\r\n          let additional=[\"status\", \"createdAt\", \"modifiedAt\", 'createdBy', 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.accountType is map &&\r\n            request.resource.data.accountType.id is string &&\r\n            request.resource.data.accountType.main is string &&\r\n            request.resource.data.accountType.name is string &&\r\n            request.resource.data.name is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.description is string &&\r\n            request.resource.data.tags is list\r\n        }\r\n\r\n        function allowAccountUpdate(){\r\n          let required=[\"name\", \"amount\", \"description\"];\r\n          let additional=[\"status\", \"modifiedAt\", 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if request.auth != null && verifyAccountData()\r\n        allow update: if isOwner() && verifyAccountData() && allowAccountUpdate()\r\n\r\n        match /transactions/{transactionId}{\r\n          allow read:if true\r\n        }\r\n      }\r\n      \r\n\r\n      match /items/{itemId} {\r\n        function getFixedValues(){\r\n          return ['createdBy', 'createdAt'];\r\n        }\r\n\r\n        function verifyItemData(){\r\n          let form1=['name', 'type', 'sku', 'skuOption', 'unit'];\r\n          let form2=['sellingPrice', 'salesAccount'];\r\n          let additional=['status', 'createdBy', 'createdAt', 'modifiedBy',  'modifiedAt'];\r\n          let optional=['variant', 'costPrice', 'salesTax', \"salesTaxType\", 'extraDetails'];\r\n          let required=form1.concat(form2).concat(additional);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.sku is string &&\r\n            request.resource.data.skuOption is string &&\r\n            request.resource.data.unit is string &&\r\n            numberValue(request.resource.data.sellingPrice) &&\r\n            request.resource.data.salesAccount is map &&\r\n            request.resource.data.get(\"variant\", '') is string &&\r\n            optionalNumber(\"costPrice\") &&\r\n            request.resource.data.get('salesTax', {}) is map &&\r\n            request.resource.data.get(\"salesTaxType\", \"\") is string &&\r\n            request.resource.data.get(\"extraDetails\", \"\") is string &&  \r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp        \r\n        }\r\n\r\n        function allowItemUpdate(){\r\n         let fixed=getFixedValues();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner();\r\n        allow create: if isOwner() && verifyItemData();\r\n        allow update: if isOwner() && verifyItemData() && allowItemUpdate()\r\n      }\r\n\r\n      match /taxes/{taxId} {\r\n        function verifyTaxData(){\r\n          let general=['name', 'rate', 'status', 'createdAt', 'createdBy', 'modifiedBy', 'modifiedAt'];\r\n          \r\n          return request.resource.data.keys().hasAll(general) &&\r\n            request.resource.data.keys().hasOnly(general) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.rate is int &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp\r\n        }\r\n\r\n        function allowTaxUpdate(){\r\n          let general=['name', 'rate', 'status', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(general)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyTaxData()\r\n        allow update: if isOwner() && verifyTaxData() && allowTaxUpdate()\r\n\r\n      }\r\n\r\n      match /journals/{entryId} {\r\n        function verifyJournalData(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"date\", \"status\", \"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(required) &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.amountState is string &&\r\n            request.resource.data.date is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountType is map &&\r\n            request.resource.data.account.name is string &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.debit) &&\r\n            numberValue(request.resource.data.credit) &&\r\n            request.resource.data.transactionId is string &&\r\n            request.resource.data.transactionDetails is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowJournalUpdate(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"status\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(required)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyJournalData()\r\n        allow update: if isOwner() && verifyJournalData() && allowJournalUpdate()\r\n        allow delete: if isOwner()\r\n      }\r\n\r\n      match /customers/{customerId} {\r\n        function customerFixed(){\r\n          return ['createdAt', 'createdBy'];\r\n        }\r\n        function verifyCustomerData(){\r\n          let details=['type','salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['openingBalance', 'paymentTerm', 'website', 'remarks'];\r\n          let fixed=customerFixed();\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'].concat(fixed);\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            numberValue(request.resource.data.openingBalance) &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.invoices is int &&\r\n            request.resource.data.summary.deletedInvoices is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.invoicedAmount) &&\r\n            numberValue(request.resource.data.summary.invoicePayments) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowCustomerUpdate(){\r\n          let fixed=customerFixed();\r\n          let allFields=[\"openingBalance\"].concat(fixed);\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt', \"summary\"];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyCustomerData()\r\n        allow update: if isOwner() && verifyCustomerData() &&\r\n          (allowCustomerUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      match /vendors/{vendorId} {\r\n        function verifyVendorData(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'createdAt', 'createdBy', 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.bills is int &&\r\n            request.resource.data.summary.deletedBills is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            request.resource.data.summary.expenses is int &&\r\n            request.resource.data.summary.deletedExpenses is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.totalBills) &&\r\n            numberValue(request.resource.data.summary.totalPayments) &&\r\n            numberValue(request.resource.data.summary.totalExpenses) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowVendorUpdate(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyVendorData()\r\n        allow update: if isOwner() && verifyVendorData() &&\r\n          (allowVendorUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      function validateSalesSummary(data){\r\n        return data.summary is map &&\r\n          numberValue(data.summary.shipping) &&\r\n          numberValue(data.summary.adjustment) &&\r\n          numberValue(data.summary.subTotal) &&\r\n          numberValue(data.summary.totalAmount) &&\r\n          numberValue(data.summary.totalTax) &&\r\n          data.get(\"summary.taxes\", []) is list\r\n      }\r\n\r\n      match /invoices/{invoiceId} {\r\n        function balanceIsValid(){\r\n           return numberValue(request.resource.data.balance) &&\r\n            request.resource.data.balance >= 0 && \r\n            request.resource.data.balance <= request.resource.data.summary.totalAmount\r\n        }\r\n\r\n        function invoiceFixed(){\r\n          return ['org', 'transactionType', 'createdAt', 'createdBy'];\r\n        }\r\n        \r\n        function verifyInvoiceData(){\r\n          let form=['customer', 'invoiceDate', \"paymentTerm\", 'dueDate', 'selectedItems'];\r\n          let formExtras=['summary', \"balance\", 'paymentsReceived','paymentsIds','paymentsCount'];\r\n          let optional=['orderNumber', 'subject', 'customerNotes'];\r\n          let meta=['status', \"isSent\", 'modifiedAt', 'modifiedBy'];\r\n          let fixed=invoiceFixed();\r\n          let required=form.concat(formExtras).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.selectedItems is list &&\r\n            request.resource.data.paymentsReceived is map &&\r\n            request.resource.data.paymentsIds is list &&\r\n            request.resource.data.paymentsCount is int &&\r\n            request.resource.data.summary is map &&\r\n            optionalNumber(\"summary.shipping\") &&\r\n            optionalNumber(\"summary.adjustment\") &&\r\n            optionalNumber(\"summary.subTotal\") &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            optionalNumber(\"summary.totalTax\") &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.paymentTerm.value is string &&\r\n            request.resource.data.invoiceDate is timestamp &&\r\n            request.resource.data.dueDate is timestamp &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.get(\"customerNotes\", \"\")  is string &&\r\n            request.resource.data.get(\"orderNumber\", \"\") is string &&\r\n            request.resource.data.get(\"subject\", \"\") is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.transactionType is string &&\r\n            balanceIsValid()\r\n        }\r\n\r\n        \r\n\r\n        function allowInvoiceUpdate(){\r\n          let fixedFields=invoiceFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixedFields)\r\n        }\r\n\r\n        function invoiceIsPaid(){\r\n          return request.resource.data.paymentsCount > 0 ||\r\n            request.resource.data.balance < request.resource.data.summary.totalAmount\r\n        }\r\n        function allowCustomerChange(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.customer.customerId != resource.data.customer.customerId\r\n        }\r\n        function allowDelete(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.status == \"deleted\"\r\n        }\r\n        function allowNormalUpdate(){\r\n          return request.resource.data.status != \"deleted\" &&\r\n            request.resource.data.customer.customerId == resource.data.customer.customerId\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyInvoiceData()\r\n        allow update: if isOwner() && verifyInvoiceData() && allowInvoiceUpdate() &&\r\n          (allowNormalUpdate() || allowCustomerChange() || allowDelete())\r\n        allow delete: if isOwner() &&\r\n          resource.data.transactionType == \"customer_opening_balance\"\r\n      }\r\n\r\n     \r\n      match /payments/{paymentId} {\r\n        function paymentsFixed(){\r\n          return ['org', 'createdBy', \"createdAt\"];\r\n        }\r\n\r\n        function verifyPaymentData(){\r\n          let form=['account', 'amount', 'customer', 'paymentDate', \"paymentMode\"];\r\n          let details=[\"payments\", \"paidInvoicesIds\", 'excess'];\r\n          let meta=['status', 'modifiedBy', \"modifiedAt\", \"transactionType\"];\r\n          let optional=['reference'];\r\n          let fixed=paymentsFixed();\r\n          let required=form.concat(details).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            numberValue(request.resource.data.excess) &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentDate is timestamp &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.paymentMode.value is string &&\r\n            request.resource.data.payments is map &&\r\n            request.resource.data.paidInvoicesIds is list &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.get(\"reference\", \"\") is string\r\n            // numberValue(request.resource.data.bankCharges) &&\r\n            // request.resource.data.taxDeducted is string &&\r\n            // request.resource.data.tdsTaxAccount is string \r\n\r\n        }\r\n\r\n        function allowPaymentUpdate(){\r\n          let fixed=paymentsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyPaymentData()\r\n        allow update: if isOwner() && verifyPaymentData() && allowPaymentUpdate()\r\n      }\r\n\r\n      match /salesReceipts/{receiptId} {\r\n        function salesReceiptsFixed(){\r\n          return ['createdAt', 'createdBy', 'org', 'transactionType'];\r\n        }\r\n        function verifySalesReceiptData(){\r\n          let form=[\"receiptDate\", \"account\", 'paymentMode', \"reference\", 'customerNotes'];\r\n          let optional=[\"customer\"];\r\n          let sale=['selectedItems', 'summary'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'isSent', 'status'];\r\n          let fixed=salesReceiptsFixed();\r\n          let required=form.concat(sale).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.get(\"customer\", {}) is map &&\r\n            request.resource.data.receiptDate is timestamp &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.customerNotes is string &&\r\n            request.resource.data.selectedItems is list &&\r\n            validateSalesSummary(request.resource.data) &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.status is string\r\n        }\r\n\r\n        function allowSalesReceiptUpdate(){\r\n          let fixed=salesReceiptsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifySalesReceiptData()\r\n        allow update: if isOwner() && verifySalesReceiptData() &&\r\n          allowSalesReceiptUpdate()\r\n      }\r\n\r\n      match /expenses/{expenseId} {\r\n        function expenseFixed(){\r\n          return ['createdAt', 'createdBy', 'org'];\r\n        }\r\n        function verifyExpenseData(){\r\n          let form=[\"expenseDate\", \"paymentAccount\", 'paymentMode', \"reference\"];\r\n          let optional=['vendor'];\r\n          let expense=['items', 'summary', 'transactionType', 'taxType'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'status'];\r\n          let fixed=expenseFixed();\r\n          let required=form.concat(expense).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.expenseDate is timestamp &&\r\n            request.resource.data.paymentAccount is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.get('vendor', {}) is map &&\r\n            request.resource.data.items is list &&\r\n            request.resource.data.summary is map &&\r\n            numberValue(request.resource.data.summary.subTotal) &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            numberValue(request.resource.data.summary.totalTax) &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.taxType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map \r\n        }\r\n\r\n        function allowExpenseUpdate(){\r\n          let fixed=expenseFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyExpenseData()\r\n        allow update: if isOwner() && verifyExpenseData() &&\r\n          allowExpenseUpdate()\r\n      }\r\n    }\r\n  }\r\n}"}]}}
[debug] [2022-09-09T21:44:08.307Z] <<< [apiv2][status] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules 200
[debug] [2022-09-09T21:44:08.307Z] <<< [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2022-09-09T21:46:21.240Z] >>> [apiv2][query] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules [none]
[debug] [2022-09-09T21:46:21.241Z] >>> [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // match /{document=**} {\r\n    //   allow read, write: if true\r\n    //       // request.time < timestamp.date(2022, 2, 19);\r\n\r\n    // }\r\n\r\n    function numberValue(field){\r\n      return field is int || field is float\r\n    }\r\n\r\n    function optionalNumber(field){\r\n      return request.resource.data.get(field, 0) is int || \r\n        request.resource.data.get(field, 0.0) is float\r\n    }\r\n\r\n    match /users/{userId} {\r\n      allow read, create, update: if request.auth.uid == request.resource.data.uid \r\n    }\r\n\r\n    match /organizations/{orgId} {\r\n      function isOrgOwner(){\r\n         return resource.data.owner == request.auth.uid;\r\n      }\r\n\r\n      function verifyOrgData(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['owner', 'status', 'createdAt', 'modifiedAt', 'createdBy', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.keys().hasAll(allFields) &&\r\n          request.resource.data.keys().hasOnly(allFields) &&\r\n          request.resource.data.name is string &&\r\n          request.resource.data.businessTypeId is string &&\r\n          request.resource.data.businessType is map &&\r\n          request.resource.data.industry is string &&\r\n          request.resource.data.phone is string &&\r\n          request.resource.data.website is string &&\r\n          request.resource.data.country is string &&\r\n          request.resource.data.state is string &&\r\n          request.resource.data.city is string &&\r\n          request.resource.data.postalCode is string &&\r\n          request.resource.data.street is string &&\r\n          request.resource.data.owner is string &&\r\n          request.resource.data.status is string &&\r\n          request.resource.data.createdAt is timestamp &&\r\n          request.resource.data.modifiedAt is timestamp &&\r\n          request.resource.data.createdBy is string &&\r\n          request.resource.data.modifiedBy is string \r\n      }\r\n\r\n      function allowOrgUpdate(){\r\n        let details=['name', 'industry', \"businessTypeId\", \"businessType\", 'phone', 'website'];\r\n        let address=['country', 'state', 'city', 'postalCode', 'street'];\r\n        let additional=['status', 'modifiedAt', 'modifiedBy'];\r\n        let allFields=details.concat(address).concat(additional);\r\n\r\n        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n      }\r\n\r\n      allow read: if isOrgOwner()\r\n      allow create: if request.auth != null && verifyOrgData()\r\n      allow update: if isOrgOwner() && verifyOrgData() && allowOrgUpdate()\r\n\r\n      function getOrgData(){\r\n        return get(/databases/$(database)/documents/organizations/$(orgId)).data\r\n      }\r\n\r\n      function isOwner(){\r\n        return request.auth.uid == getOrgData().owner\r\n      }\r\n\r\n      match /summaries/aggregate {\r\n        function verifyCountersData(){\r\n          let req1=[\"invoices\", \"deletedInvoices\", \"payments\",\"deletedPayments\", \"items\", \"customers\"];\r\n          let req2=['invoicesTotal', 'paymentsTotal', 'paymentModes', 'accounts'];\r\n          let required=req1.concat(req2);\r\n          \r\n          return request.resource.data.keys().hasAll(required) &&\r\n            numberValue(request.resource.data.invoices) &&\r\n            numberValue(request.resource.data.deletedInvoices) &&\r\n            numberValue(request.resource.data.payments) &&\r\n            numberValue(request.resource.data.deletedPayments) &&\r\n            numberValue(request.resource.data.items) &&\r\n            numberValue(request.resource.data.customers) &&\r\n            numberValue(request.resource.data.invoicesTotal) &&\r\n            numberValue(request.resource.data.paymentsTotal) \r\n            request.resource.data.paymentModes is map &&\r\n            request.resource.data.accounts is map\r\n        }\r\n\r\n\r\n        allow create: if request.auth != null && verifyCountersData()\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() && verifyCountersData()\r\n      }\r\n\r\n      match /orgDetails/{detailId} {\r\n        allow create: if request.auth != null\r\n        allow read: if isOwner()\r\n        allow update: if isOwner() \r\n      }\r\n\r\n      match /accounts/{accountId} {\r\n        function verifyAccountData(){\r\n          let required=[\"accountType\", \"name\", \"amount\", \"description\", \"tags\"];\r\n          let additional=[\"status\", \"createdAt\", \"modifiedAt\", 'createdBy', 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.accountType is map &&\r\n            request.resource.data.accountType.id is string &&\r\n            request.resource.data.accountType.main is string &&\r\n            request.resource.data.accountType.name is string &&\r\n            request.resource.data.name is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.description is string &&\r\n            request.resource.data.tags is list\r\n        }\r\n\r\n        function allowAccountUpdate(){\r\n          let required=[\"name\", \"amount\", \"description\"];\r\n          let additional=[\"status\", \"modifiedAt\", 'modifiedBy'];\r\n          let allFields=required.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if request.auth != null && verifyAccountData()\r\n        allow update: if isOwner() && verifyAccountData() && allowAccountUpdate()\r\n\r\n        match /transactions/{transactionId}{\r\n          allow read:if true\r\n        }\r\n      }\r\n      \r\n\r\n      match /items/{itemId} {\r\n        function getFixedValues(){\r\n          return ['createdBy', 'createdAt'];\r\n        }\r\n\r\n        function verifyItemData(){\r\n          let form1=['name', 'type', 'sku', 'skuOption', 'unit'];\r\n          let form2=['sellingPrice', 'salesAccount'];\r\n          let additional=['status', 'createdBy', 'createdAt', 'modifiedBy',  'modifiedAt'];\r\n          let optional=['variant', 'costPrice', 'salesTax', \"salesTaxType\", 'extraDetails'];\r\n          let required=form1.concat(form2).concat(additional);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.sku is string &&\r\n            request.resource.data.skuOption is string &&\r\n            request.resource.data.unit is string &&\r\n            numberValue(request.resource.data.sellingPrice) &&\r\n            request.resource.data.salesAccount is map &&\r\n            request.resource.data.get(\"variant\", '') is string &&\r\n            optionalNumber(\"costPrice\") &&\r\n            request.resource.data.get('salesTax', {}) is map &&\r\n            request.resource.data.get(\"salesTaxType\", \"\") is string &&\r\n            request.resource.data.get(\"extraDetails\", \"\") is string &&  \r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp        \r\n        }\r\n\r\n        function allowItemUpdate(){\r\n         let fixed=getFixedValues();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner();\r\n        allow create: if isOwner() && verifyItemData();\r\n        allow update: if isOwner() && verifyItemData() && allowItemUpdate()\r\n      }\r\n\r\n      match /taxes/{taxId} {\r\n        function verifyTaxData(){\r\n          let general=['name', 'rate', 'status', 'createdAt', 'createdBy', 'modifiedBy', 'modifiedAt'];\r\n          \r\n          return request.resource.data.keys().hasAll(general) &&\r\n            request.resource.data.keys().hasOnly(general) &&\r\n            request.resource.data.name is string &&\r\n            request.resource.data.rate is int &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp\r\n        }\r\n\r\n        function allowTaxUpdate(){\r\n          let general=['name', 'rate', 'status', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(general)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyTaxData()\r\n        allow update: if isOwner() && verifyTaxData() && allowTaxUpdate()\r\n\r\n      }\r\n\r\n      match /journals/{entryId} {\r\n        function verifyJournalData(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"date\", \"status\", \"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(required) &&\r\n            numberValue(request.resource.data.amount) &&\r\n            request.resource.data.amountState is string &&\r\n            request.resource.data.date is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountType is map &&\r\n            request.resource.data.account.name is string &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.debit) &&\r\n            numberValue(request.resource.data.credit) &&\r\n            request.resource.data.transactionId is string &&\r\n            request.resource.data.transactionDetails is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowJournalUpdate(){\r\n          let req=[\"amount\", \"amountState\", \"transactionType\", \"account\", \"debit\", \"credit\", \"transactionId\", \"transactionDetails\", \"reference\"];\r\n          let additional=[\"status\", \"modifiedAt\", \"modifiedBy\"];\r\n          let required= req.concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(required)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyJournalData()\r\n        allow update: if isOwner() && verifyJournalData() && allowJournalUpdate()\r\n        allow delete: if isOwner()\r\n      }\r\n\r\n      match /customers/{customerId} {\r\n        function customerFixed(){\r\n          return ['createdAt', 'createdBy'];\r\n        }\r\n        function verifyCustomerData(){\r\n          let details=['type','salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['openingBalance', 'paymentTerm', 'website', 'remarks'];\r\n          let fixed=customerFixed();\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'].concat(fixed);\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.type is string &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            numberValue(request.resource.data.openingBalance) &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.invoices is int &&\r\n            request.resource.data.summary.deletedInvoices is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.invoicedAmount) &&\r\n            numberValue(request.resource.data.summary.invoicePayments) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowCustomerUpdate(){\r\n          let fixed=customerFixed();\r\n          let allFields=[\"openingBalance\"].concat(fixed);\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt', \"summary\"];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyCustomerData()\r\n        allow update: if isOwner() && verifyCustomerData() &&\r\n          (allowCustomerUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      match /vendors/{vendorId} {\r\n        function verifyVendorData(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'createdAt', 'createdBy', 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.keys().hasAll(allFields) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.salutation is string &&\r\n            request.resource.data.companyName is string &&\r\n            request.resource.data.firstName is string &&\r\n            request.resource.data.lastName is string &&\r\n            request.resource.data.displayName is string &&\r\n            request.resource.data.email is string &&\r\n            request.resource.data.phone is string &&\r\n            request.resource.data.mobile is string &&\r\n            request.resource.data.billingStreet is string &&\r\n            request.resource.data.billingCity is string &&\r\n            request.resource.data.billingState is string &&\r\n            request.resource.data.billingPostalCode is string &&\r\n            request.resource.data.billingCountry is string &&\r\n            request.resource.data.shippingStreet is string &&\r\n            request.resource.data.shippingCity is string &&\r\n            request.resource.data.shippingState is string &&\r\n            request.resource.data.shippingPostalCode is string &&\r\n            request.resource.data.shippingCountry is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.website is string &&\r\n            request.resource.data.remarks is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.summary is map &&\r\n            request.resource.data.summary.bills is int &&\r\n            request.resource.data.summary.deletedBills is int &&\r\n            request.resource.data.summary.payments is int &&\r\n            request.resource.data.summary.deletedPayments is int &&\r\n            request.resource.data.summary.expenses is int &&\r\n            request.resource.data.summary.deletedExpenses is int &&\r\n            numberValue(request.resource.data.summary.unusedCredits) &&\r\n            numberValue(request.resource.data.summary.totalBills) &&\r\n            numberValue(request.resource.data.summary.totalPayments) &&\r\n            numberValue(request.resource.data.summary.totalExpenses) &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string\r\n        }\r\n\r\n        function allowVendorUpdate(){\r\n          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];\r\n          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];\r\n          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];\r\n          let extras=['paymentTerm','website','remarks'];\r\n          let additional=['status', \"summary\", 'modifiedAt', 'modifiedBy'];\r\n          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n\r\n        function updateOpeningBalance(){\r\n          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt'];\r\n\r\n          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)\r\n        }\r\n        \r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyVendorData()\r\n        allow update: if isOwner() && verifyVendorData() &&\r\n          (allowVendorUpdate() || updateOpeningBalance())\r\n      }\r\n\r\n      function validateSalesSummary(data){\r\n        return data.summary is map &&\r\n          numberValue(data.summary.shipping) &&\r\n          numberValue(data.summary.adjustment) &&\r\n          numberValue(data.summary.subTotal) &&\r\n          numberValue(data.summary.totalAmount) &&\r\n          numberValue(data.summary.totalTax) &&\r\n          data.get(\"summary.taxes\", []) is list\r\n      }\r\n\r\n      match /invoices/{invoiceId} {\r\n        function balanceIsValid(){\r\n           return numberValue(request.resource.data.balance) &&\r\n            request.resource.data.balance >= 0 && \r\n            request.resource.data.balance <= request.resource.data.summary.totalAmount\r\n        }\r\n\r\n        function invoiceFixed(){\r\n          return ['org', 'transactionType', 'createdAt', 'createdBy'];\r\n        }\r\n        \r\n        function verifyInvoiceData(){\r\n          let form=['customer', 'invoiceDate', \"paymentTerm\", 'dueDate', 'selectedItems'];\r\n          let formExtras=['summary', \"balance\", 'paymentsReceived','paymentsIds','paymentsCount'];\r\n          let optional=['orderNumber', 'subject', 'customerNotes'];\r\n          let meta=['status', \"isSent\", 'modifiedAt', 'modifiedBy'];\r\n          let fixed=invoiceFixed();\r\n          let required=form.concat(formExtras).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.selectedItems is list &&\r\n            request.resource.data.paymentsReceived is map &&\r\n            request.resource.data.paymentsIds is list &&\r\n            request.resource.data.paymentsCount is int &&\r\n            request.resource.data.summary is map &&\r\n            optionalNumber(\"summary.shipping\") &&\r\n            optionalNumber(\"summary.adjustment\") &&\r\n            optionalNumber(\"summary.subTotal\") &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            optionalNumber(\"summary.totalTax\") &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentTerm is map &&\r\n            request.resource.data.paymentTerm.value is string &&\r\n            request.resource.data.invoiceDate is timestamp &&\r\n            request.resource.data.dueDate is timestamp &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.get(\"customerNotes\", \"\")  is string &&\r\n            request.resource.data.get(\"orderNumber\", \"\") is string &&\r\n            request.resource.data.get(\"subject\", \"\") is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.transactionType is string &&\r\n            balanceIsValid()\r\n        }\r\n\r\n        \r\n\r\n        function allowInvoiceUpdate(){\r\n          let fixedFields=invoiceFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixedFields)\r\n        }\r\n\r\n        function invoiceIsPaid(){\r\n          return request.resource.data.paymentsCount > 0 ||\r\n            request.resource.data.balance < request.resource.data.summary.totalAmount\r\n        }\r\n        function allowCustomerChange(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.customer.customerId != resource.data.customer.customerId\r\n        }\r\n        function allowDelete(){\r\n          return !invoiceIsPaid() &&\r\n            request.resource.data.status == \"deleted\"\r\n        }\r\n        function allowNormalUpdate(){\r\n          return request.resource.data.status != \"deleted\" &&\r\n            request.resource.data.customer.customerId == resource.data.customer.customerId\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyInvoiceData()\r\n        allow update: if isOwner() && verifyInvoiceData() && allowInvoiceUpdate() &&\r\n          (allowNormalUpdate() || allowCustomerChange() || allowDelete())\r\n        allow delete: if isOwner() &&\r\n          resource.data.transactionType == \"customer_opening_balance\"\r\n      }\r\n\r\n     \r\n      match /payments/{paymentId} {\r\n        function paymentsFixed(){\r\n          return ['org', 'createdBy', \"createdAt\"];\r\n        }\r\n\r\n        function verifyPaymentData(){\r\n          let form=['account', 'amount', 'customer', 'paymentDate', \"paymentMode\"];\r\n          let details=[\"payments\", \"paidInvoicesIds\", 'excess'];\r\n          let meta=['status', 'modifiedBy', \"modifiedAt\", \"transactionType\"];\r\n          let optional=['reference'];\r\n          let fixed=paymentsFixed();\r\n          let required=form.concat(details).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.account.accountId is string &&\r\n            numberValue(request.resource.data.amount) &&\r\n            numberValue(request.resource.data.excess) &&\r\n            request.resource.data.customer is map &&\r\n            request.resource.data.customer.customerId is string &&\r\n            request.resource.data.paymentDate is timestamp &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.paymentMode.value is string &&\r\n            request.resource.data.payments is map &&\r\n            request.resource.data.paidInvoicesIds is list &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.get(\"reference\", \"\") is string\r\n            // numberValue(request.resource.data.bankCharges) &&\r\n            // request.resource.data.taxDeducted is string &&\r\n            // request.resource.data.tdsTaxAccount is string \r\n\r\n        }\r\n\r\n        function allowPaymentUpdate(){\r\n          let fixed=paymentsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyPaymentData()\r\n        allow update: if isOwner() && verifyPaymentData() && allowPaymentUpdate()\r\n      }\r\n\r\n      match /salesReceipts/{receiptId} {\r\n        function salesReceiptsFixed(){\r\n          return ['createdAt', 'createdBy', 'org', 'transactionType'];\r\n        }\r\n        function verifySalesReceiptData(){\r\n          let form=[\"receiptDate\", \"account\", 'paymentMode', \"reference\", 'customerNotes'];\r\n          let optional=[\"customer\"];\r\n          let sale=['selectedItems', 'summary'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'isSent', 'status'];\r\n          let fixed=salesReceiptsFixed();\r\n          let required=form.concat(sale).concat(fixed).concat(meta);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.get(\"customer\", {}) is map &&\r\n            request.resource.data.receiptDate is timestamp &&\r\n            request.resource.data.account is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.customerNotes is string &&\r\n            request.resource.data.selectedItems is list &&\r\n            validateSalesSummary(request.resource.data) &&\r\n            request.resource.data.org is map &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.isSent is bool &&\r\n            request.resource.data.status is string\r\n        }\r\n\r\n        function allowSalesReceiptUpdate(){\r\n          let fixed=salesReceiptsFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifySalesReceiptData()\r\n        allow update: if isOwner() && verifySalesReceiptData() &&\r\n          allowSalesReceiptUpdate()\r\n      }\r\n\r\n      match /expenses/{expenseId} {\r\n        function expenseFixed(){\r\n          return ['createdAt', 'createdBy', 'org'];\r\n        }\r\n        function verifyExpenseData(){\r\n          let form=[\"expenseDate\", \"paymentAccount\", 'paymentMode', \"reference\"];\r\n          let optional=['vendor'];\r\n          let expense=['items', 'summary', 'transactionType', 'taxType'];\r\n          let meta=['modifiedAt', 'modifiedBy', 'status'];\r\n          let fixed=expenseFixed();\r\n          let required=form.concat(expense).concat(meta).concat(fixed);\r\n          let allFields=required.concat(optional);\r\n\r\n          return request.resource.data.keys().hasAll(required) &&\r\n            request.resource.data.keys().hasOnly(allFields) &&\r\n            request.resource.data.expenseDate is timestamp &&\r\n            request.resource.data.paymentAccount is map &&\r\n            request.resource.data.paymentMode is map &&\r\n            request.resource.data.reference is string &&\r\n            request.resource.data.get('vendor', {}) is map &&\r\n            request.resource.data.items is list &&\r\n            request.resource.data.summary is map &&\r\n            numberValue(request.resource.data.summary.subTotal) &&\r\n            numberValue(request.resource.data.summary.totalAmount) &&\r\n            numberValue(request.resource.data.summary.totalTax) &&\r\n            request.resource.data.get(\"summary.taxes\", []) is list &&\r\n            request.resource.data.transactionType is string &&\r\n            request.resource.data.taxType is string &&\r\n            request.resource.data.createdAt is timestamp &&\r\n            request.resource.data.createdBy is string &&\r\n            request.resource.data.modifiedAt is timestamp &&\r\n            request.resource.data.modifiedBy is string &&\r\n            request.resource.data.status is string &&\r\n            request.resource.data.org is map \r\n        }\r\n\r\n        function allowExpenseUpdate(){\r\n          let fixed=expenseFixed();\r\n\r\n          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)\r\n        }\r\n\r\n        allow read: if isOwner()\r\n        allow create: if isOwner() && verifyExpenseData()\r\n        allow update: if isOwner() && verifyExpenseData() &&\r\n          allowExpenseUpdate()\r\n      }\r\n    }\r\n  }\r\n}"}]}}
[debug] [2022-09-09T21:46:21.614Z] <<< [apiv2][status] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules 200
[debug] [2022-09-09T21:46:21.615Z] <<< [apiv2][body] PUT http://localhost:8080/emulator/v1/projects/lehi-76a0d:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":91,"column":13,"currentOffset":3921,"endOffset":3927},"description":"mismatched input 'request' expecting {'&&', ',', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ')', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":645,"column":1,"currentOffset":30876,"endOffset":30876},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] !  firestore.rules:91:13 - ERROR mismatched input 'request' expecting {'&&', ',', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ')', '/', '*', '?', 'in', 'is'} 
[warn] !  firestore.rules:645:1 - ERROR Unexpected '}'. 
[info] +  firestore: Rules updated. 
