rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // match /{document=**} {
    //   allow read, write: if true
    //       // request.time < timestamp.date(2022, 2, 19);

    // }

    function numberValue(field){
      return field is int || field is float
    }

    function optionalNumber(field){
      return request.resource.data.get(field, 0) is int || 
        request.resource.data.get(field, 0.0) is float
    }

    match /users/{userId} {
      allow read, create, update: if request.auth.uid == request.resource.data.uid 
    }

    match /organizations/{orgId} {
      function isOrgOwner(){
         return resource.data.owner == request.auth.uid;
      }

      function verifyOrgData(){
        let details=['name', 'industry', "businessTypeId", "businessType", 'phone', 'website'];
        let address=['country', 'state', 'city', 'postalCode', 'street'];
        let additional=['owner', 'status', 'createdAt', 'modifiedAt', 'createdBy', 'modifiedBy'];
        let allFields=details.concat(address).concat(additional);

        return request.resource.data.keys().hasAll(allFields) &&
          request.resource.data.keys().hasOnly(allFields) &&
          request.resource.data.name is string &&
          request.resource.data.businessTypeId is string &&
          request.resource.data.businessType is map &&
          request.resource.data.industry is string &&
          request.resource.data.phone is string &&
          request.resource.data.website is string &&
          request.resource.data.country is string &&
          request.resource.data.state is string &&
          request.resource.data.city is string &&
          request.resource.data.postalCode is string &&
          request.resource.data.street is string &&
          request.resource.data.owner is string &&
          request.resource.data.status is string &&
          request.resource.data.createdAt is timestamp &&
          request.resource.data.modifiedAt is timestamp &&
          request.resource.data.createdBy is string &&
          request.resource.data.modifiedBy is string 
      }

      function allowOrgUpdate(){
        let details=['name', 'industry', "businessTypeId", "businessType", 'phone', 'website'];
        let address=['country', 'state', 'city', 'postalCode', 'street'];
        let additional=['status', 'modifiedAt', 'modifiedBy'];
        let allFields=details.concat(address).concat(additional);

        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)
      }

      allow read: if isOrgOwner()
      allow create: if request.auth != null && verifyOrgData()
      allow update: if isOrgOwner() && verifyOrgData() && allowOrgUpdate()

      function getOrgData(){
        return get(/databases/$(database)/documents/organizations/$(orgId)).data
      }

      function isOwner(){
        return request.auth.uid == getOrgData().owner
      }

      match /summaries/{summaryId} {
        function verifyCountersData(){
          let req1=["invoices", "deletedInvoices", "payments","deletedPayments", "items", "customers"];
          let req2=['invoicesTotal', 'paymentsTotal', 'paymentModes', 'accounts'];
          let required=req1.concat(req2);
          
          return request.resource.data.keys().hasAll(required) &&
            numberValue(request.resource.data.invoices) &&
            numberValue(request.resource.data.deletedInvoices) &&
            numberValue(request.resource.data.payments) &&
            numberValue(request.resource.data.deletedPayments) &&
            numberValue(request.resource.data.items) &&
            numberValue(request.resource.data.customers) &&
            numberValue(request.resource.data.invoicesTotal) &&
            numberValue(request.resource.data.paymentsTotal) &&
            request.resource.data.paymentModes is map &&
            request.resource.data.accounts is map
        }


        allow create: if request.auth != null && verifyCountersData()
        allow read: if isOwner()
        allow update: if isOwner() && verifyCountersData()
      }

      match /orgDetails/{detailId} {
        allow create: if request.auth != null
        allow read: if isOwner()
        allow update: if isOwner() 
      }

      match /accounts/{accountId} {
        function verifyAccountData(){
          let required=["accountType", "name", "amount", "description", "tags"];
          let additional=["status", "createdAt", "modifiedAt", 'createdBy', 'modifiedBy'];
          let allFields=required.concat(additional);

          return request.resource.data.keys().hasAll(required) &&
            request.resource.data.keys().hasOnly(allFields) &&
            request.resource.data.accountType is map &&
            request.resource.data.accountType.id is string &&
            request.resource.data.accountType.main is string &&
            request.resource.data.accountType.name is string &&
            request.resource.data.name is string &&
            numberValue(request.resource.data.amount) &&
            request.resource.data.description is string &&
            request.resource.data.tags is list
        }

        function allowAccountUpdate(){
          let required=["name", "amount", "description"];
          let additional=["status", "modifiedAt", 'modifiedBy'];
          let allFields=required.concat(additional);

          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)
        }

        allow read: if isOwner()
        allow create: if request.auth != null && verifyAccountData()
        allow update: if isOwner() && verifyAccountData() && allowAccountUpdate()

        match /transactions/{transactionId}{
          allow read:if true
        }
      }
      

      match /items/{itemId} {
        function getFixedValues(){
          return ['createdBy', 'createdAt'];
        }

        function verifyItemData(){
          let form1=['name', 'type', 'sku', 'skuOption', 'unit'];
          let form2=['sellingPrice', 'salesAccount'];
          let additional=['status', 'createdBy', 'createdAt', 'modifiedBy',  'modifiedAt'];
          let optional=['variant', 'costPrice', 'salesTax', "salesTaxType", 'extraDetails'];
          let required=form1.concat(form2).concat(additional);
          let allFields=required.concat(optional);

          return request.resource.data.keys().hasAll(required) &&
            request.resource.data.keys().hasOnly(allFields) &&
            request.resource.data.name is string &&
            request.resource.data.type is string &&
            request.resource.data.sku is string &&
            request.resource.data.skuOption is string &&
            request.resource.data.unit is string &&
            numberValue(request.resource.data.sellingPrice) &&
            request.resource.data.salesAccount is map &&
            request.resource.data.get("variant", '') is string &&
            optionalNumber("costPrice") &&
            request.resource.data.get('salesTax', {}) is map &&
            request.resource.data.get("salesTaxType", "") is string &&
            request.resource.data.get("extraDetails", "") is string &&  
            request.resource.data.status is string &&
            request.resource.data.createdBy is string &&
            request.resource.data.modifiedBy is string &&
            request.resource.data.createdAt is timestamp &&
            request.resource.data.modifiedAt is timestamp        
        }

        function allowItemUpdate(){
         let fixed=getFixedValues();

          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)
        }

        allow read: if isOwner();
        allow create: if isOwner() && verifyItemData();
        allow update: if isOwner() && verifyItemData() && allowItemUpdate()
      }

      match /taxes/{taxId} {
        function verifyTaxData(){
          let general=['name', 'rate', 'status', 'createdAt', 'createdBy', 'modifiedBy', 'modifiedAt'];
          
          return request.resource.data.keys().hasAll(general) &&
            request.resource.data.keys().hasOnly(general) &&
            request.resource.data.name is string &&
            request.resource.data.rate is int &&
            request.resource.data.status is string &&
            request.resource.data.createdAt is timestamp &&
            request.resource.data.createdBy is string &&
            request.resource.data.modifiedBy is string &&
            request.resource.data.modifiedAt is timestamp
        }

        function allowTaxUpdate(){
          let general=['name', 'rate', 'status', 'modifiedBy', 'modifiedAt'];

          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(general)
        }

        allow read: if isOwner()
        allow create: if isOwner() && verifyTaxData()
        allow update: if isOwner() && verifyTaxData() && allowTaxUpdate()

      }

      match /journals/{entryId} {
        function verifyJournalData(){
          let req=["amount", "amountState", "transactionType", "account", "debit", "credit", "transactionId", "transactionDetails", "reference"];
          let additional=["date", "status", "createdAt", "createdBy", "modifiedAt", "modifiedBy"];
          let required= req.concat(additional);

          return request.resource.data.keys().hasAll(required) &&
            request.resource.data.keys().hasOnly(required) &&
            numberValue(request.resource.data.amount) &&
            request.resource.data.amountState is string &&
            request.resource.data.date is map &&
            request.resource.data.transactionType is string &&
            request.resource.data.account is map &&
            request.resource.data.account.accountType is map &&
            request.resource.data.account.name is string &&
            request.resource.data.account.accountId is string &&
            numberValue(request.resource.data.debit) &&
            numberValue(request.resource.data.credit) &&
            request.resource.data.transactionId is string &&
            request.resource.data.transactionDetails is map &&
            request.resource.data.reference is string &&
            request.resource.data.status is string &&
            request.resource.data.createdAt is timestamp &&
            request.resource.data.createdBy is string &&
            request.resource.data.modifiedAt is timestamp &&
            request.resource.data.modifiedBy is string
        }

        function allowJournalUpdate(){
          let req=["amount", "amountState", "transactionType", "account", "debit", "credit", "transactionId", "transactionDetails", "reference"];
          let additional=["status", "modifiedAt", "modifiedBy"];
          let required= req.concat(additional);

          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(required)
        }

        allow read: if isOwner()
        allow create: if isOwner() && verifyJournalData()
        allow update: if isOwner() && verifyJournalData() && allowJournalUpdate()
        allow delete: if isOwner()
      }

      match /customers/{customerId} {
        function customerFixed(){
          return ['createdAt', 'createdBy'];
        }
        function verifyCustomerData(){
          let details=['type','salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];
          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];
          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];
          let extras=['openingBalance', 'paymentTerm', 'website', 'remarks'];
          let fixed=customerFixed();
          let additional=['status', "summary", 'modifiedAt', 'modifiedBy'].concat(fixed);
          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);

          return request.resource.data.keys().hasAll(allFields) &&
            request.resource.data.keys().hasOnly(allFields) &&
            request.resource.data.type is string &&
            request.resource.data.salutation is string &&
            request.resource.data.companyName is string &&
            request.resource.data.firstName is string &&
            request.resource.data.lastName is string &&
            request.resource.data.displayName is string &&
            request.resource.data.email is string &&
            request.resource.data.phone is string &&
            request.resource.data.mobile is string &&
            request.resource.data.billingStreet is string &&
            request.resource.data.billingCity is string &&
            request.resource.data.billingState is string &&
            request.resource.data.billingPostalCode is string &&
            request.resource.data.billingCountry is string &&
            request.resource.data.shippingStreet is string &&
            request.resource.data.shippingCity is string &&
            request.resource.data.shippingState is string &&
            request.resource.data.shippingPostalCode is string &&
            request.resource.data.shippingCountry is string &&
            numberValue(request.resource.data.openingBalance) &&
            request.resource.data.paymentTerm is map &&
            request.resource.data.website is string &&
            request.resource.data.remarks is string &&
            request.resource.data.status is string &&
            request.resource.data.summary is map &&
            request.resource.data.summary.invoices is int &&
            request.resource.data.summary.deletedInvoices is int &&
            request.resource.data.summary.payments is int &&
            request.resource.data.summary.deletedPayments is int &&
            numberValue(request.resource.data.summary.unusedCredits) &&
            numberValue(request.resource.data.summary.invoicedAmount) &&
            numberValue(request.resource.data.summary.invoicePayments) &&
            request.resource.data.createdAt is timestamp &&
            request.resource.data.modifiedAt is timestamp &&
            request.resource.data.createdBy is string &&
            request.resource.data.modifiedBy is string
        }

        function allowCustomerUpdate(){
          let fixed=customerFixed();
          let allFields=["openingBalance"].concat(fixed);

          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(allFields)
        }

        function updateOpeningBalance(){
          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt', "summary"];

          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)
        }
        
        allow read: if isOwner()
        allow create: if isOwner() && verifyCustomerData()
        allow update: if isOwner() && verifyCustomerData() &&
          (allowCustomerUpdate() || updateOpeningBalance())
      }

      match /vendors/{vendorId} {
        function verifyVendorData(){
          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];
          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];
          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];
          let extras=['paymentTerm','website','remarks'];
          let additional=['status', "summary", 'createdAt', 'createdBy', 'modifiedAt', 'modifiedBy'];
          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);

          return request.resource.data.keys().hasAll(allFields) &&
            request.resource.data.keys().hasOnly(allFields) &&
            request.resource.data.salutation is string &&
            request.resource.data.companyName is string &&
            request.resource.data.firstName is string &&
            request.resource.data.lastName is string &&
            request.resource.data.displayName is string &&
            request.resource.data.email is string &&
            request.resource.data.phone is string &&
            request.resource.data.mobile is string &&
            request.resource.data.billingStreet is string &&
            request.resource.data.billingCity is string &&
            request.resource.data.billingState is string &&
            request.resource.data.billingPostalCode is string &&
            request.resource.data.billingCountry is string &&
            request.resource.data.shippingStreet is string &&
            request.resource.data.shippingCity is string &&
            request.resource.data.shippingState is string &&
            request.resource.data.shippingPostalCode is string &&
            request.resource.data.shippingCountry is string &&
            request.resource.data.paymentTerm is map &&
            request.resource.data.website is string &&
            request.resource.data.remarks is string &&
            request.resource.data.status is string &&
            request.resource.data.summary is map &&
            request.resource.data.summary.bills is int &&
            request.resource.data.summary.deletedBills is int &&
            request.resource.data.summary.payments is int &&
            request.resource.data.summary.deletedPayments is int &&
            request.resource.data.summary.expenses is int &&
            request.resource.data.summary.deletedExpenses is int &&
            numberValue(request.resource.data.summary.unusedCredits) &&
            numberValue(request.resource.data.summary.totalBills) &&
            numberValue(request.resource.data.summary.totalPayments) &&
            numberValue(request.resource.data.summary.totalExpenses) &&
            request.resource.data.createdAt is timestamp &&
            request.resource.data.modifiedAt is timestamp &&
            request.resource.data.createdBy is string &&
            request.resource.data.modifiedBy is string
        }

        function allowVendorUpdate(){
          let details=['salutation','companyName','firstName','lastName','displayName','email','phone','mobile'];
          let address1=['billingStreet','billingCity','billingState','billingPostalCode','billingCountry'];
          let address2=['shippingStreet','shippingCity','shippingState','shippingPostalCode','shippingCountry'];
          let extras=['paymentTerm','website','remarks'];
          let additional=['status', "summary", 'modifiedAt', 'modifiedBy'];
          let allFields=details.concat(address1).concat(address2).concat(extras).concat(additional);

          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)
        }

        function updateOpeningBalance(){
          let allFields=['openingBalance', 'modifiedBy', 'modifiedAt'];

          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)
        }
        
        allow read: if isOwner()
        allow create: if isOwner() && verifyVendorData()
        allow update: if isOwner() && verifyVendorData() &&
          (allowVendorUpdate() || updateOpeningBalance())
      }

      function validateSalesSummary(data){
        return data.summary is map &&
          numberValue(data.summary.shipping) &&
          numberValue(data.summary.adjustment) &&
          numberValue(data.summary.subTotal) &&
          numberValue(data.summary.totalAmount) &&
          numberValue(data.summary.totalTaxes) &&
          data.get("summary.taxes", []) is list
      }

      match /invoices/{invoiceId} {
        function balanceIsValid(){
           return numberValue(request.resource.data.balance) &&
            request.resource.data.balance >= 0 && 
            request.resource.data.balance <= request.resource.data.summary.totalAmount
        }

        function invoiceFixed(){
          return ['org', 'transactionType', 'createdAt', 'createdBy'];
        }
        
        function verifyInvoiceData(){
          let form=['customer', 'invoiceDate', "paymentTerm", 'dueDate', 'selectedItems'];
          let formExtras=['summary', "balance", 'paymentsReceived','paymentsIds','paymentsCount'];
          let optional=['orderNumber', 'subject', 'customerNotes'];
          let meta=['status', "isSent", 'modifiedAt', 'modifiedBy'];
          let fixed=invoiceFixed();
          let required=form.concat(formExtras).concat(fixed).concat(meta);
          let allFields=required.concat(optional);

          return request.resource.data.keys().hasAll(required) &&
            request.resource.data.keys().hasOnly(allFields) &&
            request.resource.data.selectedItems is list &&
            request.resource.data.paymentsReceived is map &&
            request.resource.data.paymentsIds is list &&
            request.resource.data.paymentsCount is int &&
            request.resource.data.summary is map &&
            optionalNumber("summary.shipping") &&
            optionalNumber("summary.adjustment") &&
            optionalNumber("summary.subTotal") &&
            numberValue(request.resource.data.summary.totalAmount) &&
            optionalNumber("summary.totalTaxes") &&
            request.resource.data.get("summary.taxes", []) is list &&
            request.resource.data.customer is map &&
            request.resource.data.customer.customerId is string &&
            request.resource.data.paymentTerm is map &&
            request.resource.data.paymentTerm.value is string &&
            request.resource.data.invoiceDate is timestamp &&
            request.resource.data.dueDate is timestamp &&
            request.resource.data.createdAt is timestamp &&
            request.resource.data.modifiedAt is timestamp &&
            request.resource.data.createdBy is string &&
            request.resource.data.modifiedBy is string &&
            request.resource.data.org is map &&
            request.resource.data.get("customerNotes", "")  is string &&
            request.resource.data.get("orderNumber", "") is string &&
            request.resource.data.get("subject", "") is string &&
            request.resource.data.status is string &&
            request.resource.data.isSent is bool &&
            request.resource.data.transactionType is string &&
            balanceIsValid()
        }

        

        function allowInvoiceUpdate(){
          let fixedFields=invoiceFixed();

          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixedFields)
        }

        function invoiceIsPaid(){
          return request.resource.data.paymentsCount > 0 ||
            request.resource.data.balance < request.resource.data.summary.totalAmount
        }
        function allowCustomerChange(){
          return !invoiceIsPaid() &&
            request.resource.data.customer.customerId != resource.data.customer.customerId
        }
        function allowDelete(){
          return !invoiceIsPaid() &&
            request.resource.data.status == "deleted"
        }
        function allowNormalUpdate(){
          return request.resource.data.status != "deleted" &&
            request.resource.data.customer.customerId == resource.data.customer.customerId
        }

        allow read: if isOwner()
        allow create: if isOwner() && verifyInvoiceData()
        allow update: if isOwner() && verifyInvoiceData() && allowInvoiceUpdate() &&
          (allowNormalUpdate() || allowCustomerChange() || allowDelete())
        allow delete: if isOwner() &&
          resource.data.transactionType == "customer_opening_balance"
      }

     
      match /payments/{paymentId} {
        function paymentsFixed(){
          return ['org', 'createdBy', "createdAt"];
        }

        function verifyPaymentData(){
          let form=['account', 'amount', 'customer', 'paymentDate', "paymentMode"];
          let details=["payments", "paidInvoicesIds", 'excess'];
          let meta=['status', 'modifiedBy', "modifiedAt", "transactionType"];
          let optional=['reference'];
          let fixed=paymentsFixed();
          let required=form.concat(details).concat(meta).concat(fixed);
          let allFields=required.concat(optional);

          return request.resource.data.keys().hasAll(required) &&
            request.resource.data.keys().hasOnly(allFields) &&
            request.resource.data.account is map &&
            request.resource.data.account.accountId is string &&
            numberValue(request.resource.data.amount) &&
            numberValue(request.resource.data.excess) &&
            request.resource.data.customer is map &&
            request.resource.data.customer.customerId is string &&
            request.resource.data.paymentDate is timestamp &&
            request.resource.data.paymentMode is map &&
            request.resource.data.paymentMode.value is string &&
            request.resource.data.payments is map &&
            request.resource.data.paidInvoicesIds is list &&
            request.resource.data.status is string &&
            request.resource.data.org is map &&
            request.resource.data.createdBy is string &&
            request.resource.data.createdAt is timestamp &&
            request.resource.data.modifiedBy is string &&
            request.resource.data.modifiedAt is timestamp &&
            request.resource.data.transactionType is string &&
            request.resource.data.get("reference", "") is string
            // numberValue(request.resource.data.bankCharges) &&
            // request.resource.data.taxDeducted is string &&
            // request.resource.data.tdsTaxAccount is string 

        }

        function allowPaymentUpdate(){
          let fixed=paymentsFixed();

          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)
        }

        allow read: if isOwner()
        allow create: if isOwner() && verifyPaymentData()
        allow update: if isOwner() && verifyPaymentData() && allowPaymentUpdate()
      }

      match /salesReceipts/{receiptId} {
        function salesReceiptsFixed(){
          return ['createdAt', 'createdBy', 'org', 'transactionType'];
        }
        function verifySalesReceiptData(){
          let form=["receiptDate", "account", 'paymentMode', "reference", 'customerNotes'];
          let optional=["customer"];
          let sale=['selectedItems', 'summary'];
          let meta=['modifiedAt', 'modifiedBy', 'isSent', 'status'];
          let fixed=salesReceiptsFixed();
          let required=form.concat(sale).concat(fixed).concat(meta);
          let allFields=required.concat(optional);

          return request.resource.data.keys().hasAll(required) &&
            request.resource.data.keys().hasOnly(allFields) &&
            request.resource.data.get("customer", {}) is map &&
            request.resource.data.receiptDate is timestamp &&
            request.resource.data.account is map &&
            request.resource.data.paymentMode is map &&
            request.resource.data.reference is string &&
            request.resource.data.customerNotes is string &&
            request.resource.data.selectedItems is list &&
            validateSalesSummary(request.resource.data) &&
            request.resource.data.org is map &&
            request.resource.data.transactionType is string &&
            request.resource.data.createdAt is timestamp &&
            request.resource.data.createdBy is string &&
            request.resource.data.modifiedAt is timestamp &&
            request.resource.data.modifiedBy is string &&
            request.resource.data.isSent is bool &&
            request.resource.data.status is string
        }

        function allowSalesReceiptUpdate(){
          let fixed=salesReceiptsFixed();

          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)
        }

        allow read: if isOwner()
        allow create: if isOwner() && verifySalesReceiptData()
        allow update: if isOwner() && verifySalesReceiptData() &&
          allowSalesReceiptUpdate()
      }

      match /expenses/{expenseId} {
        function expenseFixed(){
          return ['createdAt', 'createdBy', 'org'];
        }
        function verifyExpenseData(){
          let form=["expenseDate", "paymentAccount", 'paymentMode', "reference"];
          let optional=['vendor'];
          let expense=['items', 'summary', 'transactionType', 'taxType'];
          let meta=['modifiedAt', 'modifiedBy', 'status'];
          let fixed=expenseFixed();
          let required=form.concat(expense).concat(meta).concat(fixed);
          let allFields=required.concat(optional);

          return request.resource.data.keys().hasAll(required) &&
            request.resource.data.keys().hasOnly(allFields) &&
            request.resource.data.expenseDate is timestamp &&
            request.resource.data.paymentAccount is map &&
            request.resource.data.paymentMode is map &&
            request.resource.data.reference is string &&
            request.resource.data.get('vendor', {}) is map &&
            request.resource.data.items is list &&
            request.resource.data.summary is map &&
            numberValue(request.resource.data.summary.subTotal) &&
            numberValue(request.resource.data.summary.totalAmount) &&
            numberValue(request.resource.data.summary.totalTaxes) &&
            request.resource.data.get("summary.taxes", []) is list &&
            request.resource.data.transactionType is string &&
            request.resource.data.taxType is string &&
            request.resource.data.createdAt is timestamp &&
            request.resource.data.createdBy is string &&
            request.resource.data.modifiedAt is timestamp &&
            request.resource.data.modifiedBy is string &&
            request.resource.data.status is string &&
            request.resource.data.org is map 
        }

        function allowExpenseUpdate(){
          let fixed=expenseFixed();

          return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fixed)
        }

        allow read: if isOwner()
        allow create: if isOwner() && verifyExpenseData()
        allow update: if isOwner() && verifyExpenseData() &&
          allowExpenseUpdate()
      }
    }
  }
}