rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // match /{document=**} {
    //   allow read, write: if true
    //       // request.time < timestamp.date(2022, 2, 19);

    // }
    match /users/{userId} {
      allow read, create, update: if request.auth.uid == request.resource.data.user_id 
    }

    match /organizations/{orgId} {
      function isOrgOwner(){
         return resource.data.owner == request.auth.uid;
      }

      function verifyOrgData(){
        let general=['name', 'size', 'industry', 'owner', 'status'];
        let additional=["accountTypes", 'createdAt', 'modifiedAt', 'createdBy', 'modifiedBy'];
        let info=['address', 'city', 'phone'];
        let person=['firstName', 'lastName', 'contactPhone'];
        let optional=['website'];
        let required=general.concat(info).concat(person).concat(additional);
        let allFields=required.concat(optional);

        return request.resource.data.keys().hasAll(required) &&
          request.resource.data.keys().hasOnly(allFields) &&
          request.resource.data.name is string &&
          request.resource.data.size is string &&
          request.resource.data.industry is string &&
          request.resource.data.owner is string &&
          request.resource.data.status is string &&
          request.resource.data.address is string &&
          request.resource.data.city is string &&
          request.resource.data.phone is string &&
          request.resource.data.firstName is string &&
          request.resource.data.lastName is string &&
          request.resource.data.contactPhone is string &&
          request.resource.data.website is string &&
          request.resource.data.createdAt is timestamp &&
          request.resource.data.modifiedAt is timestamp &&
          request.resource.data.createdBy is string &&
          request.resource.data.modifiedBy is string &&
          request.resource.data.accountTypes is map
          // request.resource.data.summary is map &&
          // request.resource.data.summary.invoices is int &&
          // request.resource.data.summary.invoicesTotal is int &&
          // request.resource.data.summary.payments is int &&
          // request.resource.data.summary.paymentsTotal is int &&
          // request.resource.data.summary.items is int &&
          // request.resource.data.summary.customers is int
      }

      function allowOrgUpdate(){
        let general=['name', 'size', 'industry', 'owner', 'status'];
        let additional=['modifiedAt', 'modifiedBy'];
        let info=['address', 'city', 'phone'];
        let person=['firstName', 'lastName', 'contactPhone'];
        let optional=['website'];
        let required=general.concat(info).concat(person).concat(additional);
        let allFields=required.concat(optional);

        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)
      }

      

      allow read: if isOrgOwner()
      allow create: if request.auth != null && verifyOrgData()
      allow update: if isOrgOwner() && verifyOrgData() && allowOrgUpdate()

      function getOrgData(){
        return get(/databases/$(database)/documents/organizations/$(orgId)).data
      }

      function isOwner(){
        return request.auth.uid == getOrgData().owner
      }

      match /summaries/counters {
        function verifyCountersData(){
          let required=["invoices", "deletedInvoices", "payments","deletedPayments", "items", "customers"];
          
          return request.resource.data.keys().hasAll(required) &&
            request.resource.data.invoices is int &&
            request.resource.data.deletedInvoices is int &&
            request.resource.data.payments is int &&
            request.resource.data.deletedPayments is int &&
            request.resource.data.items is int &&
            request.resource.data.customers is int
        }


        allow create: if request.auth != null && verifyCountersData()
        allow read: if isOwner()
        allow update: if isOwner() && verifyCountersData()
      }

      match /accounts/{accountId} {
        function verifyAccountData(){
          let required=["accountType", "name", "amount", "description"];
          let additional=["status", "createdAt", "modifiedAt", 'createdBy', 'modifiedBy'];
          let allFields=required.concat(additional);

          return request.resource.data.keys().hasAll(required) &&
            request.resource.data.keys().hasOnly(allFields) &&
            request.resource.data.accountType is map &&
            request.resource.data.accountType.id is string &&
            request.resource.data.accountType.main is string &&
            request.resource.data.accountType.name is string &&
            request.resource.data.name is string &&
            request.resource.data.amount is int &&
            request.resource.data.description is string
        }

        function allowAccountUpdate(){
          let required=["name", "amount", "description"];
          let additional=["status", "modifiedAt", 'modifiedBy'];
          let allFields=required.concat(additional);

          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)
        }

        allow read: if isOwner()
        allow create: if request.auth != null && verifyAccountData()
        allow update: if isOwner() && verifyAccountData() && allowAccountUpdate()

        match /transactions/{transactionId}{
          allow read:if true
        }
      }
      

      match /items/{itemId} {

        function verifyItemData(){
          let general=['name', 'type',  'sku', 'unit', "salesAccountId", 'salesAccount', 'sellingPrice', 'costAccount', 'costPrice'];
          let additional=['status', 'createdBy', 'modifiedBy', 'createdAt', 'modifiedAt'];
          let required= general.concat(additional);
          let optional=['variant', 'costDetails', 'itemDescription', 'sellingDetails', 'salesTax', 'salesTaxId', "salesTaxType"];
          let allFields=required.concat(optional);

          return request.resource.data.keys().hasAll(required) &&
            request.resource.data.keys().hasOnly(allFields) &&
            request.resource.data.name is string &&
            request.resource.data.type is string &&
            request.resource.data.status is string &&
            request.resource.data.sku is string &&
            request.resource.data.createdBy is string &&
            request.resource.data.modifiedBy is string &&
            request.resource.data.createdAt is timestamp &&
            request.resource.data.modifiedAt is timestamp &&
            request.resource.data.costAccount is string &&
            request.resource.data.costPrice is int &&
            request.resource.data.salesAccountId is string &&
            request.resource.data.salesAccount is map &&
            request.resource.data.sellingPrice is int &&
            request.resource.data.variant is string &&
            request.resource.data.costDetails is string &&
            request.resource.data.unit is string &&
            request.resource.data.itemDescription is string &&
            request.resource.data.sellingDetails is string &&
            request.resource.data.salesTax is map &&
            request.resource.data.salesTaxId is string &&
            request.resource.data.salesTaxType is string
        }

        function allowItemUpdate(){
          let cost=['costDetails', 'costAccount', 'costPrice'];
          let selling=['sellingDetails', 'salesAccount', 'sellingPrice', 'salesTax', 'salesTaxId', 'salesTaxType'];
          let general=['name', 'variant', 'sku', 'status', 'type', 'unit', 'itemDescription', 'modifiedAt', 'modifiedBy'];
          let allowed=general.concat(selling).concat(cost);

          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowed)
        }

        allow read: if isOwner();
        allow create: if isOwner() && verifyItemData();
        allow update: if isOwner() && verifyItemData() && allowItemUpdate()
      }

      match /taxes/{taxId} {
        function verifyTaxData(){
          let general=['name', 'rate', 'status', 'createdAt', 'createdBy', 'modifiedBy', 'modifiedAt'];
          
          return request.resource.data.keys().hasAll(general) &&
            request.resource.data.keys().hasOnly(general) &&
            request.resource.data.name is string &&
            request.resource.data.rate is int &&
            request.resource.data.status is string &&
            request.resource.data.createdAt is timestamp &&
            request.resource.data.createdBy is string &&
            request.resource.data.modifiedBy is string &&
            request.resource.data.modifiedAt is timestamp
        }

        function allowTaxUpdate(){
          let general=['name', 'rate', 'status', 'modifiedBy', 'modifiedAt'];

          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(general)
        }

        allow read: if isOwner()
        allow create: if isOwner() && verifyTaxData()
        allow update: if isOwner() && verifyTaxData() && allowTaxUpdate()

      }

      match /customers/{customerId} {
        function verifyCustomerData(){
          let req=['type', 'salutation', 'firstName', 'lastName', 'displayName', 'workPhone', 'city', 'address'];
          let additional=['status', "summary", 'createdAt', 'createdBy', 'modifiedAt', 'modifiedBy'];
          let required=req.concat(additional);
          let optional=['companyName', 'email', 'mobile', 'zipcode', 'website', 'remarks', 'openingBalance'];
          let allFields=required.concat(optional);

          return request.resource.data.keys().hasAll(required) &&
            request.resource.data.keys().hasOnly(allFields) &&
            request.resource.data.status is string &&
            request.resource.data.type is string &&
            request.resource.data.salutation is string &&
            request.resource.data.firstName is string &&
            request.resource.data.lastName is string &&
            request.resource.data.companyName is string &&
            request.resource.data.displayName is string &&
            request.resource.data.email is string &&
            request.resource.data.workPhone is string &&
            request.resource.data.mobile is string &&
            request.resource.data.city is string &&
            request.resource.data.zipcode is string &&
            request.resource.data.website is string &&
            request.resource.data.address is string &&
            request.resource.data.remarks is string &&
            request.resource.data.createdAt is timestamp &&
            request.resource.data.modifiedAt is timestamp &&
            request.resource.data.createdBy is string &&
            request.resource.data.modifiedBy is string &&
            request.resource.data.summary is map &&
            request.resource.data.summary.invoices is int &&
            request.resource.data.summary.invoicesTotal is int &&
            request.resource.data.summary.payments is int &&
            request.resource.data.summary.paymentsTotal is int 
            // request.resource.data.openingBalance is int &&

        }

        function allowCustomerUpdate(){
          let req=['type', 'salutation', 'firstName', 'lastName', 'displayName', 'workPhone', 'city', 'address'];
          let additional=['status', "summary", 'modifiedAt', 'modifiedBy', "summary"];
          let required=req.concat(additional);
          let optional=['companyName', 'email', 'mobile', 'zipcode', 'website', 'remarks'];
          let allFields=required.concat(optional);

          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)
        }
        
        allow read: if isOwner()
        allow create: if isOwner() && verifyCustomerData()
        allow update: if isOwner() && verifyCustomerData() && allowCustomerUpdate()
      }

      match /invoices/{invoiceId} {
        function verifyInvoiceData(){
          let req=['selectedItems', 'summary', 'payments', 'customer', 'customerId', 'invoiceDate', 'dueDate'];
          let additional=['invoiceNumber', 'invoiceSlug', 'status', 'createdAt', 'modifiedAt', 'createdBy', 'modifiedBy', 'org'];
          let required=req.concat(additional);
          let optional=['customerNotes', 'orderNumber', 'subject'];
          let allFields=required.concat(optional);

          return request.resource.data.keys().hasAll(required) &&
            request.resource.data.keys().hasOnly(allFields) &&
            request.resource.data.selectedItems is list &&
            request.resource.data.payments is map &&
            request.resource.data.summary is map &&
            request.resource.data.summary.shipping is int &&
            request.resource.data.summary.adjustment is int &&
            request.resource.data.summary.subTotal is int &&
            request.resource.data.summary.totalAmount is int &&
            request.resource.data.summary.balance is int &&
            request.resource.data.summary.totalTax is int &&
            request.resource.data.summary.taxes is list &&
            request.resource.data.customer is map &&
            request.resource.data.customerId is string &&
            request.resource.data.invoiceDate is string &&
            request.resource.data.dueDate is string &&
            request.resource.data.createdAt is timestamp &&
            request.resource.data.modifiedAt is timestamp &&
            request.resource.data.createdBy is string &&
            request.resource.data.modifiedBy is string &&
            request.resource.data.org is map &&
            request.resource.data.customerNotes is string &&
            request.resource.data.orderNumber is string &&
            request.resource.data.subject is string &&
            request.resource.data.invoiceNumber is int &&
            request.resource.data.invoiceSlug is string &&
            request.resource.data.status is string
        }

        function allowInvoiceUpdate(){
          let req=['selectedItems', 'summary', 'payments', 'customer', 'customerId', 'invoiceDate', 'dueDate'];
          let additional=['status','modifiedAt', 'modifiedBy'];
          let required=req.concat(additional);
          let optional=['customerNotes', 'orderNumber', 'subject'];
          let allFields=required.concat(optional);

          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)
        }

        allow read: if isOwner()
        allow create: if isOwner() && verifyInvoiceData()
        allow update: if isOwner() && verifyInvoiceData() && allowInvoiceUpdate()
      }

      match /payments/{paymentId} {

        function verifyPaymentData(){
          let req=['account', 'amount', "summary", 'customerId', 'customer', 'paymentDate', "paymentMode", 'taxDeducted'];
          let optional=['bankCharges', 'paidInvoices', "reference", "tdsTaxAccount"];
          let additional=['status', 'org', 'paymentSlug', 'paymentNumber', 'createdBy', 'modifiedBy', "createdAt", "modifiedAt"];
          let required=req.concat(additional);
          let allFields=required.concat(optional);

          return request.resource.data.keys().hasAll(required) &&
            request.resource.data.keys().hasOnly(allFields) &&
            request.resource.data.summary is map &&
            request.resource.data.summary.amount is int &&
            request.resource.data.summary.excess is int &&
            request.resource.data.summary.payments is int &&
            request.resource.data.account is string &&
            request.resource.data.amount is int &&
            request.resource.data.customerId is string &&
            request.resource.data.customer is map &&
            request.resource.data.paymentDate is string &&
            request.resource.data.paymentMode is string &&
            request.resource.data.taxDeducted is string &&
            request.resource.data.bankCharges is int &&
            request.resource.data.paidInvoices is list &&
            request.resource.data.reference is string &&
            request.resource.data.status is string &&
            request.resource.data.org is map &&
            request.resource.data.paymentSlug is string &&
            request.resource.data.paymentNumber is int &&
            request.resource.data.createdBy is string &&
            request.resource.data.modifiedBy is string &&
            request.resource.data.createdAt is timestamp &&
            request.resource.data.modifiedAt is timestamp 
            // request.resource.data.tdsTaxAccount is string 

        }

        function allowPaymentUpdate(){
          let req=['account', 'amount', "summary", 'customerId', 'customer', 'paymentDate', "paymentMode", 'taxDeducted'];
          let optional=['bankCharges', 'paidInvoices', "reference", "tdsTaxAccount"];
          let additional=['status', 'modifiedBy', "modifiedBy"];
          let required=req.concat(additional);
          let allFields=required.concat(optional);

          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allFields)
        }

        allow read: if isOwner()
        allow create: if isOwner() && verifyPaymentData()
        allow update: if isOwner() && verifyPaymentData() && allowPaymentUpdate()
      }
    }
  }
}